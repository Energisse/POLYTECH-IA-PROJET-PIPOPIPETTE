{"version":3,"file":"static/js/826.ae618432.chunk.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","utils/game.ts","utils/mcts.ts","utils/player.ts","utils/negamax.ts","utils/nigamax.ts","worker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"63d11d41\" + \".chunk.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/POLYTECH-IA-PROJET-PIPOPIPETTE/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t826: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","import { Player } from \"./player\";\r\n\r\nexport default class Game extends EventTarget {\r\n  readonly board: Board;\r\n  private players: [Player, Player];\r\n\r\n  constructor(size: number, player1: Player, player2: Player) {\r\n    super();\r\n    this.board = new Board(size);\r\n    this.players = [player1, player2];\r\n    this.play();\r\n  }\r\n\r\n  public async play() {\r\n    await this.players[this.board.getTour()].play(this.board, this.board.getTour()).then((coup) => {\r\n      this.board.play(coup.orientation, coup.x, coup.y);\r\n      if (!this.board.isFinished()) this.play();\r\n    });\r\n  }\r\n}\r\n\r\nexport type playValue = -1 | 0 | 1;\r\nexport type playerValue = 0 | 1;\r\n\r\nexport class Board extends EventTarget {\r\n  private cells: playValue[][] = [];\r\n  private verticals: playValue[][] = [];\r\n  private horizontals: playValue[][] = [];\r\n\r\n  private score: [number, number] = [0, 0];\r\n\r\n  private tour: playerValue = 0;\r\n\r\n  constructor(size: number);\r\n  constructor(board: { cells: playValue[][]; verticals: playValue[][]; horizontals: playValue[][]; score: [number, number]; tour: playerValue });\r\n  constructor(BoardOrSize: number | { cells: playValue[][]; verticals: playValue[][]; horizontals: playValue[][]; score: [number, number]; tour: playerValue }) {\r\n    super();\r\n    if (typeof BoardOrSize === \"number\") {\r\n      this.cells = new Array(BoardOrSize).fill(0).map(() => new Array(BoardOrSize).fill(-1));\r\n      this.verticals = new Array(BoardOrSize)\r\n        .fill(0)\r\n        .map(() => new Array(BoardOrSize + 1).fill(-1));\r\n      this.horizontals = new Array(BoardOrSize + 1)\r\n        .fill(0)\r\n        .map(() => new Array(BoardOrSize).fill(-1));\r\n      this.score = [0, 0];\r\n      this.tour = 0;\r\n    } else {\r\n      this.cells = BoardOrSize.cells;\r\n      this.verticals = BoardOrSize.verticals;\r\n      this.horizontals = BoardOrSize.horizontals;\r\n      this.score = BoardOrSize.score;\r\n      this.tour = BoardOrSize.tour;\r\n    }\r\n  }\r\n\r\n  public getCells(): playValue[][] {\r\n    return this.cells;\r\n  }\r\n\r\n  public getVerticals(): playValue[][] {\r\n    return this.verticals;\r\n  }\r\n\r\n  public getHorizontals(): playValue[][] {\r\n    return this.horizontals;\r\n  }\r\n\r\n  public getScore(): [number, number] {\r\n    return this.score;\r\n  }\r\n\r\n  public getTour(): playerValue {\r\n    return this.tour;\r\n  }\r\n\r\n  public play(\r\n    orientation: \"vertical\" | \"horizontal\",\r\n    x: number,\r\n    y: number\r\n  ): void {\r\n    if (orientation === \"vertical\") {\r\n      if (this.verticals[y][x] !== -1) return;\r\n      this.verticals[y][x] = this.tour;\r\n    } else {\r\n      if (this.horizontals[y][x] !== -1) return;\r\n      this.horizontals[y][x] = this.tour;\r\n    }\r\n\r\n    const cells: Array<[x: number, y: number]> = [];\r\n\r\n    if (orientation === \"horizontal\") {\r\n      let result = this.check(x, y);\r\n      if (result) cells.push(result);\r\n      result = this.check(x, y - 1);\r\n      if (result) cells.push(result);\r\n    } else {\r\n      let result = this.check(x, y);\r\n      if (result) cells.push(result);\r\n      result = this.check(x - 1, y);\r\n      if (result) cells.push(result);\r\n    }\r\n\r\n    if (!cells.length) {\r\n      this.tour = this.tour === 1 ? 0 : 1;\r\n    } else {\r\n      this.score[this.tour] += cells.length;\r\n\r\n      cells.forEach((cell) => {\r\n        this.cells[cell[1]][cell[0]] = this.tour;\r\n      });\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"boardChange\", {\r\n        detail: {\r\n          verticals: this.verticals,\r\n          horizontals: this.horizontals,\r\n          cells: this.cells,\r\n          score: this.score,\r\n        },\r\n      })\r\n    );\r\n\r\n\r\n    if (this.isFinished()) {\r\n      const winner = this.score[0] === this.score[1] ? -1 : this.score[0] > this.score[1] ? 0 : 1;\r\n      this.dispatchEvent(new CustomEvent(\"end\", { detail: { winner } }));\r\n    }\r\n  }\r\n\r\n  public isFinished() {\r\n    return this.score[0] > this.cells.length ** 2 / 2 || this.score[1] > this.cells.length ** 2 / 2 || this.score[0] + this.score[1] === this.cells.length ** 2;\r\n  }\r\n\r\n  private check(x: number, y: number): false | [x: number, y: number] {\r\n    if (x < 0 || x >= this.cells.length || y < 0 || y >= this.cells.length) {\r\n      return false;\r\n    }\r\n    if (\r\n      this.verticals[y][x] !== -1 &&\r\n      this.verticals[y][x + 1] !== -1 &&\r\n      this.horizontals[y][x] !== -1 &&\r\n      this.horizontals[y + 1]?.[x] !== -1\r\n    ) {\r\n      return [x, y];\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public evaluation(idPlayer: playerValue) {\r\n    return this.score[idPlayer] - this.score[idPlayer === 1 ? 0 : 1];\r\n  }\r\n\r\n  public copy() {\r\n    const board = new Board(this.cells.length);\r\n    board.cells = this.cells.map((row) => [...row]);\r\n    board.verticals = this.verticals.map((row) => [...row]);\r\n    board.horizontals = this.horizontals.map((row) => [...row]);\r\n    board.score = [...this.score];\r\n    board.tour = this.tour;\r\n    return board;\r\n  }\r\n\r\n  private *getNodesVertical(): Generator<\r\n    {\r\n      x: number;\r\n      y: number;\r\n      board: Board;\r\n      orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n  > {\r\n    const playable = this.verticals\r\n      .flatMap((row, y) => row.map((value, x) => ({ x, y, value })))\r\n      .filter(({ value }) => value === -1);\r\n\r\n    while (playable.length > 0) {\r\n      const { x, y } = playable.splice(\r\n        Math.floor(Math.random() * playable.length),\r\n        1\r\n      )[0];\r\n      const board = this.copy();\r\n      const lastTour = board.tour;\r\n      board.play(\"vertical\", x, y);\r\n      if (board.tour === lastTour && !board.isFinished()) {\r\n        for (const node of board.getNodes()) {\r\n          yield { ...node, x, y, orientation: \"vertical\" };\r\n        }\r\n      } else yield { x, y, board, orientation: \"vertical\" };\r\n    }\r\n  }\r\n\r\n  private *getNodesHorizontal(): Generator<\r\n    {\r\n      x: number;\r\n      y: number;\r\n      board: Board;\r\n      orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n  > {\r\n    const playable = this.horizontals\r\n      .flatMap((row, y) => row.map((value, x) => ({ x, y, value })))\r\n      .filter(({ value }) => value === -1);\r\n\r\n    while (playable.length > 0) {\r\n      const { x, y } = playable.splice(\r\n        Math.floor(Math.random() * playable.length),\r\n        1\r\n      )[0];\r\n      const board = this.copy();\r\n      const lastTour = board.tour;\r\n      board.play(\"horizontal\", x, y);\r\n      if (board.tour === lastTour && !board.isFinished()) {\r\n        for (const node of board.getNodes()) {\r\n          yield { ...node, x, y, orientation: \"horizontal\" };\r\n        }\r\n      } else yield { x, y, board, orientation: \"horizontal\" };\r\n    }\r\n  }\r\n\r\n  public *getNodes(): Generator<\r\n    {\r\n      x: number;\r\n      y: number;\r\n      board: Board;\r\n      orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n  > {\r\n    const verticals = this.getNodesVertical();\r\n    const horizontals = this.getNodesHorizontal();\r\n\r\n    let doneHorizontal = false;\r\n    let doneVertical = false;\r\n\r\n    while (!doneHorizontal && !doneVertical) {\r\n      if (Math.random() < 0.5) {\r\n        const { value, done } = verticals.next();\r\n        if (done) doneVertical = true;\r\n        else yield value;\r\n      } else {\r\n        const { value, done } = horizontals.next();\r\n        if (done) doneHorizontal = true;\r\n        else yield value;\r\n      }\r\n    }\r\n\r\n    if (!doneHorizontal) {\r\n      for (const value of horizontals) {\r\n        yield value;\r\n      }\r\n    }\r\n\r\n    if (!doneVertical) {\r\n      for (const value of verticals) {\r\n        yield value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // public *getNodes(): Generator<{\r\n  //   x: number;\r\n  //   y: number;\r\n  //   board: Board;\r\n  //   orientation: \"vertical\" | \"horizontal\";\r\n  // }, void, void> {\r\n  //   for (let y = 0; y < this.verticals.length; y++) {\r\n  //     for (let x = 0; x < this.verticals[y].length; x++) {\r\n  //       if (this.verticals[y][x] === 0) {\r\n  //         const board = this.copy();\r\n  //         const lastTour = board.tour;\r\n  //         board.play(\"vertical\", x, y);\r\n  //         if (board.tour === lastTour && !board.isFinished()) {\r\n  //           for (const node of board.getNodes()) {\r\n  //             yield { ...node, x, y, orientation: \"vertical\" };\r\n  //           }\r\n  //         }\r\n  //         else yield { x, y, board, orientation: \"vertical\" };\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   for (let y = 0; y < this.horizontals.length; y++) {\r\n  //     for (let x = 0; x < this.horizontals[y].length; x++) {\r\n  //       if (this.horizontals[y][x] === 0) {\r\n  //         const board = this.copy();\r\n  //         const lastTour = board.tour;\r\n  //         board.play(\"horizontal\", x, y);\r\n  //         if (board.tour === lastTour && !board.isFinished()) {\r\n  //           for (const node of board.getNodes()) {\r\n  //             yield { ...node, x, y, orientation: \"horizontal\" };\r\n  //           }\r\n  //         }\r\n  //         else yield { x, y, board, orientation: \"horizontal\" };\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n}\r\n\r\n\r\n","import { Board } from \"./game\";\r\n\r\n\r\nexport class MctsNode {\r\n    public wins: number;\r\n    public visits: number;\r\n    public nodes: Map<\"vertical\" | \"horizontal\", Map<number, Map<number, MctsNode>>>;\r\n    public parent: MctsNode | null;\r\n    private board: Board;\r\n    private player: 0 | 1;\r\n    private simulation: number;\r\n    private c: number\r\n    private generator: Generator<{ orientation: \"vertical\" | \"horizontal\"; x: number; y: number, board: Board }, void, unknown>;\r\n\r\n    constructor(board: Board, player: 0 | 1, simulation: number, c: number, parent: MctsNode | null = null) {\r\n        this.wins = 0;\r\n        this.visits = 0;\r\n        this.nodes = new Map();\r\n        this.parent = parent;\r\n        this.generator = board.getNodes();\r\n        this.board = board;\r\n        this.simulation = simulation;\r\n        this.player = player;\r\n        this.c = c;\r\n    }\r\n\r\n\r\n    public run() {\r\n        if (this.board.isFinished()) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                this.backpropagation(this.simulate());\r\n            }\r\n            return\r\n        }\r\n\r\n        let newChild = this.expansion()\r\n\r\n        if (newChild) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                newChild.backpropagation(newChild.simulate());\r\n            }\r\n        }\r\n        else {\r\n            const { bestNode } = this.selection();\r\n            bestNode.run();\r\n        }\r\n    }\r\n\r\n    private selection(): {\r\n        bestNode: MctsNode;\r\n        x: number;\r\n        y: number;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    } {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits + this.c * Math.sqrt(2 * Math.log(this.visits) / node.visits);\r\n                    if (value > bestValue) {\r\n                        bestValue = value;\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    private simulate() {\r\n        \r\n        let gen = this.board.getNodes();\r\n        const result = this.board.copy();\r\n        for (let node of gen) {\r\n            result.play(node.orientation, node.x, node.y);\r\n            if (node.board.isFinished()) {\r\n                break;\r\n            }\r\n        }\r\n        return result.getScore()[this.player] > result.getScore()[this.player === 1 ? 0 : 1];\r\n    }\r\n\r\n    private expansion() {\r\n        const { value, done } = this.generator.next();\r\n\r\n        if (done) return false;\r\n\r\n        const { orientation, x, y, board } = value;\r\n        const child = new MctsNode(board, this.player, this.simulation, this.c, this);\r\n        let mapOrientation = this.nodes.get(orientation);\r\n        if (!mapOrientation) {\r\n            mapOrientation = new Map();\r\n            this.nodes.set(orientation, mapOrientation);\r\n        }\r\n\r\n        let mapX = mapOrientation.get(x);\r\n        if (!mapX) {\r\n            mapX = new Map();\r\n            mapOrientation.set(x, mapX);\r\n        }\r\n\r\n        mapX.set(y, child);\r\n\r\n        return child;\r\n    }\r\n\r\n    private backpropagation(won: boolean) {\r\n        if (won) {\r\n            this.wins++;\r\n        }\r\n        this.visits++;\r\n        if (this.parent) {\r\n            this.parent.backpropagation(won);\r\n        }\r\n    }\r\n\r\n    public getBestChild() {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits;\r\n                    if (value > bestValue) {\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestValue = value;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    getNumberVisited() {\r\n        return this.visits;\r\n    }\r\n\r\n}","import { Board } from \"./game\";\r\nimport { MctsNode } from \"./mcts\";\r\nimport negamax from \"./negamax\";\r\nimport nigamax from \"./nigamax\";\r\n\r\nexport interface Coup {\r\n    x: number,\r\n    y: number,\r\n    orientation: \"vertical\" | \"horizontal\"\r\n}\r\n\r\nexport abstract class Player extends EventTarget {\r\n    protected totalTime: number = 0;\r\n    protected totalMove: number = 0;\r\n    protected times: number[] = [];\r\n\r\n    abstract play(board: Board, player: 0 | 1): Promise<Coup>\r\n}\r\n\r\nexport class HumanPlayer extends Player {\r\n    play(board: Board, player: 0 | 1) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const start = performance.now()\r\n            this.addEventListener(\"play\", (e: Event) => {\r\n                const end = performance.now()\r\n                this.totalTime += end - start\r\n                this.totalMove++\r\n                this.times.push(end - start)\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time: ${end - start} Average time: ${this.totalTime / this.totalMove}ms`)\r\n                const customEvent = e as CustomEvent<{ x: number, y: number, orientation: \"vertical\" | \"horizontal\" }>;\r\n                resolve(customEvent.detail);\r\n            }, { once: true })\r\n        })\r\n    }\r\n}\r\n\r\nexport abstract class iaPlayer extends Player {\r\n    async play(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return (await Promise.all([\r\n            (async (): Promise<Coup> => {\r\n                const start = performance.now()\r\n                const result = await this.playIa(board, player)\r\n                const end = performance.now()\r\n                this.totalTime += end - start\r\n                this.totalMove++\r\n                this.times.push(end - start)\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time: ${end - start} Average time: ${this.totalTime / this.totalMove}ms`)\r\n                return result\r\n            })(),\r\n            //delay to see the move\r\n            new Promise<void>((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve()\r\n                }, 500)\r\n            })\r\n        ]))[0]\r\n    }\r\n\r\n    abstract playIa(board: Board, player: number): Promise<Coup>;\r\n}\r\n\r\nexport class MctsPlayer extends iaPlayer {\r\n    private iteration: number;\r\n    private simulation: number;\r\n    private c: number\r\n    private lastBoard: Board | null = null;\r\n    private lastNode: MctsNode | null = null;\r\n\r\n    constructor({ iteration, simulation, c }: { iteration: number, simulation: number, c?: number }) {\r\n        super();\r\n        this.iteration = iteration;\r\n        this.simulation = simulation;\r\n        this.c = c || Math.sqrt(2);\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            let bestNode: MctsNode | null = null;\r\n            if (this.lastBoard && this.lastNode) {\r\n                const played = this.lastBoard\r\n                    .getHorizontals()\r\n                    .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.getHorizontals()[y][x] !== -1 ? { x, y, orientation: \"horizontal\" } : null))\r\n                    .filter(x => x)\r\n                    .concat(\r\n                        this.lastBoard\r\n                            .getVerticals()\r\n                            .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.getVerticals()[y][x] !== -1 ? { x, y, orientation: \"vertical\" } : null))\r\n                            .filter(x => x)\r\n                    ) as { x: number, y: number, orientation: \"vertical\" | \"horizontal\" }[]\r\n\r\n                if (played.length === 0) {\r\n                    bestNode = this.lastNode;\r\n                }\r\n\r\n\r\n                let bestValue = -Infinity;\r\n                if (played.length > 0) {\r\n                    for (const coup of permute(played)) {\r\n                        let currentNode: MctsNode | null = this.lastNode!.nodes.get(coup[0].orientation)?.get(coup[0].x)?.get(coup[0].y) || null;\r\n                        for (let i = 1; i < coup.length; i++) {\r\n                            currentNode = currentNode?.nodes.get(coup[i].orientation)?.get(coup[i].x)?.get(coup[i].y) || null;\r\n                            if (!currentNode) break;\r\n                        }\r\n                        if (currentNode) {\r\n                            if (currentNode.wins > bestValue) {\r\n                                bestValue = currentNode.wins;\r\n                                bestNode = currentNode;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            let root = bestNode || new MctsNode(board, player, this.simulation, this.c);\r\n            while (root.getNumberVisited() < this.iteration * this.simulation) {\r\n                root.run();\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"tree\", { detail: root }));\r\n            let bestChild = root.getBestChild();\r\n            this.lastNode = bestChild.bestNode;\r\n            board.play(bestChild.orientation, bestChild.x, bestChild.y);\r\n            this.lastBoard = board.copy();\r\n            resolve({ x: bestChild.x, y: bestChild.y, orientation: bestChild.orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class RandomPlayer extends iaPlayer {\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { orientation, x, y } = board.getNodes().next().value!\r\n            resolve({ x, y, orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class MinimaxPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = negamax(board, this.depth, true, player)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\nexport class FastestPlayer extends iaPlayer {\r\n    private depth: number;\r\n    private ias: (\"minimax\" | \"alphabeta\" | \"mcts\")[] = [\"minimax\", \"alphabeta\", \"mcts\"]\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1) {\r\n        const workers: Worker[] = []\r\n\r\n        return Promise.race(this.ias.map(ia => {\r\n            return new Promise<[Coup, typeof ia]>((resolve) => {\r\n                const worker = new Worker(new URL(\"../playerWorker.ts\", import.meta.url));\r\n                workers.push(worker)\r\n                worker.postMessage({ board: JSON.parse(JSON.stringify(board)), depth: this.depth, player, type: ia });\r\n                worker.addEventListener(\"message\", (e) => {\r\n                    resolve([e.data, ia]);\r\n                })\r\n            })\r\n        })).then(([coup, ia]) => {\r\n            workers.forEach(worker => worker.terminate())\r\n            console.log(ia)\r\n            return coup\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport class AlphaBetaPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = nigamax(board, this.depth, true, player)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction permute<T>(arr: T[]): T[][] {\r\n    let results: T[][] = [];\r\n\r\n    function permuteRecursively(subArr: T[], memo: T[]) {\r\n        if (subArr.length === 0) {\r\n            results.push(memo.slice());\r\n        } else {\r\n            for (let i = 0; i < subArr.length; i++) {\r\n                let curr = subArr.slice();\r\n                let next = curr.splice(i, 1);\r\n                permuteRecursively(curr, memo.concat(next));\r\n            }\r\n        }\r\n    }\r\n\r\n    permuteRecursively(arr, []);\r\n    return results;\r\n}","import { Board, playerValue } from \"./game\";\r\nimport { Coup } from \"./player\";\r\n\r\nexport default function negamax(board: Board, _depth: number, maximizingPlayer: boolean, idPlayer: playerValue): {\r\n  x: number;\r\n  y: number;\r\n  value: number;\r\n  orientation: \"vertical\" | \"horizontal\";\r\n  nodes: number;\r\n} {\r\n  let x = 0, y = 0, orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n  let nodes = 0;\r\n  function _negamax(board: Board, depth: number, maximizingPlayer: boolean): number {\r\n    if (depth === 0 || board.isFinished())\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n    let value = -Infinity;\r\n    for (const { board: node, x: _x, y: _y, orientation: _orientation } of board.getNodes()) {\r\n      nodes++;\r\n      const result = _negamax(node, depth - 1, !maximizingPlayer);\r\n      if (-result > value) {\r\n        if (depth === _depth) {\r\n          x = _x;\r\n          y = _y;\r\n          orientation = _orientation;\r\n        }\r\n        value = -result;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  const value = _negamax(board, _depth, maximizingPlayer)\r\n\r\n  return {\r\n    x,\r\n    y,\r\n    orientation,\r\n    value,\r\n    nodes\r\n  };\r\n}","import { Board, playerValue } from \"./game\";\r\n\r\nexport default function nigamax(board: Board, _depth: number, maximizingPlayer: boolean, idPlayer: playerValue, alpha: number = -Infinity, beta: number = Infinity): {\r\n  x: number;\r\n  y: number;\r\n  value: number;\r\n  orientation: \"vertical\" | \"horizontal\";\r\n  nodes: number;\r\n} {\r\n  let x = 0, y = 0, orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n  let nodes = 0;\r\n  function _nigamax(board: Board, depth: number, maximizingPlayer: boolean, alpha: number = -Infinity, beta: number = Infinity): number {\r\n    if (depth === 0 || board.isFinished()) {\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n    }\r\n    let value = -Infinity;\r\n    for (const { board: node, x: _x, y: _y, orientation: _orientation } of board.getNodes()) {\r\n      nodes++;\r\n      const result = _nigamax(node, depth - 1, !maximizingPlayer, -beta, -alpha);\r\n      if (-result > value) {\r\n        value = -result;\r\n        if (depth === _depth) {\r\n          x = _x;\r\n          y = _y;\r\n          orientation = _orientation;\r\n        }\r\n      }\r\n      if (value >= beta) {\r\n        return value\r\n      }\r\n      alpha = Math.max(alpha, value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  const value = _nigamax(board, _depth, maximizingPlayer, alpha, beta)\r\n  return {\r\n    value,\r\n    x,\r\n    y,\r\n    orientation,\r\n    nodes\r\n  };\r\n}\r\n","import { MainToWorkerEventMap } from \"./@types/worker\";\r\nimport Game, { playValue, playerValue } from \"./utils/game\";\r\nimport { AlphaBetaPlayer, FastestPlayer, HumanPlayer, MctsPlayer, MinimaxPlayer, RandomPlayer } from \"./utils/player\";\r\n\r\ndeclare var self: DedicatedWorkerGlobalScope;\r\n\r\nDedicatedWorkerGlobalScope.prototype.emit = function (...data) {\r\n    this.postMessage({ type: data[0], data: data[1] });\r\n}\r\n\r\nself.addEventListener(\"message\", ({ data: { data, type } }) => {\r\n    self.dispatchEvent(new CustomEvent(type, {\r\n        detail: data\r\n    }));\r\n});\r\n\r\nlet game: Game | null = null;\r\n\r\ntype Node = {\r\n    visits: number,\r\n    wins: number,\r\n    nodes: Map<string, Map<number, Map<number, Node>>>\r\n}\r\n\r\ntype Data = {\r\n    name: string,\r\n    children: Data[]\r\n}\r\n\r\nfunction formatNode(node: Node): Data {\r\n    const children = new Array<Data>();\r\n    node.nodes.forEach((row, orientation) => {\r\n        row.forEach((cell, x) => {\r\n            cell.forEach((node, y) => {\r\n                children.push(formatNode(node));\r\n            });\r\n        });\r\n    });\r\n\r\n    return {\r\n        name: `${node.wins}/${node.visits}`,\r\n        children\r\n    }\r\n\r\n}\r\n\r\nself.addEventListener(\"start\", ({ detail: { player1, player2, size } }) => {\r\n    if (game) return;\r\n\r\n    const player1Instance = createPlayer(player1);\r\n    const player2Instance = createPlayer(player2);\r\n\r\n    player1Instance.addEventListener(\"tree\", (e) => {\r\n        self.emit(\"tree\", {\r\n            player: 1,\r\n            tree: formatNode((e as CustomEvent<Node>).detail)\r\n        });\r\n    });\r\n\r\n    player2Instance.addEventListener(\"tree\", (e) => {\r\n        self.emit(\"tree\", {\r\n            player: 2,\r\n            tree: formatNode((e as CustomEvent<Node>).detail)\r\n        });\r\n    });\r\n\r\n\r\n    game = new Game(size, player1Instance, player2Instance);\r\n\r\n    if (player1Instance instanceof HumanPlayer) {\r\n        self.addEventListener(\"play\", (e) => {\r\n            player1Instance.dispatchEvent(new CustomEvent(\"play\", {\r\n                detail: e.detail\r\n            }));\r\n        });\r\n    }\r\n\r\n    if (player2Instance instanceof HumanPlayer) {\r\n        self.addEventListener(\"play\", (e) => {\r\n            player2Instance.dispatchEvent(new CustomEvent(\"play\", {\r\n                detail: e.detail\r\n            }));\r\n        });\r\n    }\r\n\r\n    self.emit(\"change\", {\r\n        verticals: game.board.getVerticals(),\r\n        horizontals: game.board.getHorizontals(),\r\n        score: game.board.getScore(),\r\n        tour: game.board.getTour(),\r\n        cells: game.board.getCells()\r\n    });\r\n\r\n    game.board.addEventListener(\"end\", (e) => {\r\n        const { winner } = (\r\n            e as CustomEvent<{\r\n                winner: playerValue\r\n            }>\r\n        ).detail;\r\n        self.emit(\"end\", {\r\n            winner\r\n        });\r\n    });\r\n\r\n    game.board.addEventListener(\"boardChange\", (e) => {\r\n        const { verticals, horizontals, cells } = (\r\n            e as CustomEvent<{\r\n                verticals: playValue[][];\r\n                horizontals: playValue[][];\r\n                cells: playValue[][];\r\n            }>\r\n        ).detail;\r\n\r\n        self.emit(\"change\", {\r\n            verticals,\r\n            horizontals,\r\n            score: game!.board.getScore(),\r\n            tour: game!.board.getTour(),\r\n            cells\r\n        });\r\n    });\r\n});\r\n\r\n\r\nfunction createPlayer(player: MainToWorkerEventMap[\"start\"][\"detail\"][\"player1\"]) {\r\n    switch (player.type) {\r\n        case \"human\":\r\n            return new HumanPlayer();\r\n        case \"random\":\r\n            return new RandomPlayer();\r\n        case \"minimax\":\r\n            return new MinimaxPlayer(player);\r\n        case \"alphabeta\":\r\n            return new AlphaBetaPlayer(player);\r\n        case \"mcts\":\r\n            return new MctsPlayer(player);\r\n        case \"fastest\":\r\n            return new FastestPlayer(player);\r\n    }\r\n}\r\n\r\n\r\nexport { };\r\n\r\n"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","self","location","Game","EventTarget","constructor","size","player1","player2","super","board","players","this","Board","play","getTour","then","coup","orientation","x","y","isFinished","BoardOrSize","cells","verticals","horizontals","score","tour","Array","fill","map","getCells","getVerticals","getHorizontals","getScore","result","check","push","length","forEach","cell","dispatchEvent","CustomEvent","detail","winner","_this$horizontals","evaluation","idPlayer","copy","row","getNodesVertical","playable","flatMap","value","filter","_ref","splice","Math","floor","random","lastTour","node","getNodes","getNodesHorizontal","_ref2","doneHorizontal","doneVertical","done","next","MctsNode","player","simulation","c","parent","arguments","undefined","wins","visits","nodes","generator","Map","run","i","backpropagation","simulate","newChild","expansion","bestNode","selection","bestValue","Infinity","_orientation","_x","_y","sqrt","log","gen","child","mapOrientation","get","set","mapX","won","getBestChild","getNumberVisited","Player","totalTime","totalMove","times","HumanPlayer","Promise","resolve","start","performance","now","addEventListener","e","end","console","concat","name","once","iaPlayer","all","playIa","setTimeout","MctsPlayer","iteration","lastBoard","lastNode","played","arr","results","permuteRecursively","subArr","memo","slice","curr","permute","_nodes$get","_nodes$get$get","currentNode","_currentNode","_currentNode$nodes$ge","_currentNode$nodes$ge2","root","bestChild","RandomPlayer","MinimaxPlayer","depth","_depth","maximizingPlayer","_negamax","negamax","FastestPlayer","_ref3","ias","workers","race","ia","worker","Worker","URL","postMessage","JSON","parse","stringify","type","data","_ref4","terminate","AlphaBetaPlayer","_ref5","_nigamax","alpha","beta","max","nigamax","DedicatedWorkerGlobalScope","emit","game","formatNode","children","createPlayer","player1Instance","player2Instance","tree"],"sourceRoot":""}