{"version":3,"file":"static/js/472.e40292d6.chunk.js","mappings":"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","sources":["utils/game.ts","utils/mcts.ts","utils/negamax.ts","utils/nigamax.ts","utils/player.ts","playerWorker.ts","../webpack/bootstrap","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/startup"],"sourcesContent":["import { Player } from \"./player\";\r\n\r\nexport default class Game extends EventTarget {\r\n  readonly board: Board;\r\n  private players: [Player, Player];\r\n\r\n  constructor(size: number, player1: Player, player2: Player) {\r\n    super();\r\n    this.board = new Board(size);\r\n    this.players = [player1, player2];\r\n    this.play();\r\n  }\r\n\r\n  public async play() {\r\n    await this.players[this.board.getTour() - 1].play(this.board, this.board.getTour() - 1).then((coup) => {\r\n      this.board.play(coup.orientation, coup.x, coup.y);\r\n      if (!this.board.isFinished()) this.play();\r\n    });\r\n  }\r\n}\r\n\r\nexport class Board extends EventTarget {\r\n  private cells: number[][] = [];\r\n  private verticals: number[][] = [];\r\n  private horizontals: number[][] = [];\r\n\r\n  private score: [number, number] = [0, 0];\r\n\r\n  private tour: number = 1;\r\n\r\n  constructor(size: number);\r\n  constructor(board: { cells: number[][]; verticals: number[][]; horizontals: number[][]; score: [number, number]; tour: number });\r\n  constructor(BoardOrSize: number | { cells: number[][]; verticals: number[][]; horizontals: number[][]; score: [number, number]; tour: number }) {\r\n    super();\r\n    if (typeof BoardOrSize === \"number\") {\r\n      this.cells = new Array(BoardOrSize).fill(0).map(() => new Array(BoardOrSize).fill(0));\r\n      this.verticals = new Array(BoardOrSize)\r\n        .fill(0)\r\n        .map(() => new Array(BoardOrSize + 1).fill(0));\r\n      this.horizontals = new Array(BoardOrSize + 1)\r\n        .fill(0)\r\n        .map(() => new Array(BoardOrSize).fill(0));\r\n      this.score = [0, 0];\r\n      this.tour = 1;\r\n    } else {\r\n      this.cells = BoardOrSize.cells;\r\n      this.verticals = BoardOrSize.verticals;\r\n      this.horizontals = BoardOrSize.horizontals;\r\n      this.score = BoardOrSize.score;\r\n      this.tour = BoardOrSize.tour;\r\n    }\r\n  }\r\n\r\n  public getCells(): number[][] {\r\n    return this.cells;\r\n  }\r\n\r\n  public getVerticals(): number[][] {\r\n    return this.verticals;\r\n  }\r\n\r\n  public getHorizontals(): number[][] {\r\n    return this.horizontals;\r\n  }\r\n\r\n  public getScore(): [number, number] {\r\n    return this.score;\r\n  }\r\n\r\n  public getTour(): number {\r\n    return this.tour;\r\n  }\r\n\r\n  public play(\r\n    orientation: \"vertical\" | \"horizontal\",\r\n    x: number,\r\n    y: number\r\n  ): void {\r\n    if (orientation === \"vertical\") {\r\n      if (this.verticals[y][x] !== 0) return;\r\n      this.verticals[y][x] = this.tour;\r\n    } else {\r\n      if (this.horizontals[y][x] !== 0) return;\r\n      this.horizontals[y][x] = this.tour;\r\n    }\r\n\r\n    const cells: Array<[x: number, y: number]> = [];\r\n\r\n    if (orientation === \"horizontal\") {\r\n      let result = this.check(x, y);\r\n      if (result) cells.push(result);\r\n      result = this.check(x, y - 1);\r\n      if (result) cells.push(result);\r\n    } else {\r\n      let result = this.check(x, y);\r\n      if (result) cells.push(result);\r\n      result = this.check(x - 1, y);\r\n      if (result) cells.push(result);\r\n    }\r\n\r\n    if (!cells.length) {\r\n      this.tour = this.tour === 1 ? 2 : 1;\r\n    } else {\r\n      this.score[this.tour - 1] += cells.length;\r\n\r\n      cells.forEach((cell) => {\r\n        this.cells[cell[1]][cell[0]] = this.tour;\r\n      });\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"boardChange\", {\r\n        detail: {\r\n          verticals: this.verticals,\r\n          horizontals: this.horizontals,\r\n          cells: this.cells,\r\n          score: this.score,\r\n        },\r\n      })\r\n    );\r\n\r\n\r\n    if (this.isFinished()) {\r\n      const winner = this.score[0] === this.score[1] ? 0 : this.score[0] > this.score[1] ? 1 : 2;\r\n      this.dispatchEvent(new CustomEvent(\"end\", { detail: { winner } }));\r\n    }\r\n  }\r\n\r\n  public isFinished() {\r\n    return this.score[0] > this.cells.length ** 2 / 2 || this.score[1] > this.cells.length ** 2 / 2 || this.score[0] + this.score[1] === this.cells.length ** 2;\r\n  }\r\n\r\n  private check(x: number, y: number): false | [x: number, y: number] {\r\n    if (x < 0 || x >= this.cells.length || y < 0 || y >= this.cells.length) {\r\n      return false;\r\n    }\r\n    if (\r\n      this.verticals[y][x] &&\r\n      this.verticals[y][x + 1] &&\r\n      this.horizontals[y][x] &&\r\n      this.horizontals[y + 1]?.[x]\r\n    ) {\r\n      return [x, y];\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public evaluation(idPlayer: number) {\r\n    return this.score[idPlayer] - this.score[(idPlayer + 1) % 2];\r\n  }\r\n\r\n  public copy() {\r\n    const board = new Board(this.cells.length);\r\n    board.cells = this.cells.map((row) => [...row]);\r\n    board.verticals = this.verticals.map((row) => [...row]);\r\n    board.horizontals = this.horizontals.map((row) => [...row]);\r\n    board.score = [...this.score];\r\n    board.tour = this.tour;\r\n    return board;\r\n  }\r\n\r\n  private *getNodesVertical(): Generator<\r\n    {\r\n      x: number;\r\n      y: number;\r\n      board: Board;\r\n      orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n  > {\r\n    const playable = this.verticals\r\n      .flatMap((row, y) => row.map((value, x) => ({ x, y, value })))\r\n      .filter(({ value }) => value === 0);\r\n\r\n    while (playable.length > 0) {\r\n      const { x, y } = playable.splice(\r\n        Math.floor(Math.random() * playable.length),\r\n        1\r\n      )[0];\r\n      const board = this.copy();\r\n      const lastTour = board.tour;\r\n      board.play(\"vertical\", x, y);\r\n      if (board.tour === lastTour && !board.isFinished()) {\r\n        for (const node of board.getNodes()) {\r\n          yield { ...node, x, y, orientation: \"vertical\" };\r\n        }\r\n      } else yield { x, y, board, orientation: \"vertical\" };\r\n    }\r\n  }\r\n\r\n  private *getNodesHorizontal(): Generator<\r\n    {\r\n      x: number;\r\n      y: number;\r\n      board: Board;\r\n      orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n  > {\r\n    const playable = this.horizontals\r\n      .flatMap((row, y) => row.map((value, x) => ({ x, y, value })))\r\n      .filter(({ value }) => value === 0);\r\n\r\n    while (playable.length > 0) {\r\n      const { x, y } = playable.splice(\r\n        Math.floor(Math.random() * playable.length),\r\n        1\r\n      )[0];\r\n      const board = this.copy();\r\n      const lastTour = board.tour;\r\n      board.play(\"horizontal\", x, y);\r\n      if (board.tour === lastTour && !board.isFinished()) {\r\n        for (const node of board.getNodes()) {\r\n          yield { ...node, x, y, orientation: \"horizontal\" };\r\n        }\r\n      } else yield { x, y, board, orientation: \"horizontal\" };\r\n    }\r\n  }\r\n\r\n  public *getNodes(): Generator<\r\n    {\r\n      x: number;\r\n      y: number;\r\n      board: Board;\r\n      orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n  > {\r\n    const verticals = this.getNodesVertical();\r\n    const horizontals = this.getNodesHorizontal();\r\n\r\n    let doneHorizontal = false;\r\n    let doneVertical = false;\r\n\r\n    while (!doneHorizontal && !doneVertical) {\r\n      if (Math.random() < 0.5) {\r\n        const { value, done } = verticals.next();\r\n        if (done) doneVertical = true;\r\n        else yield value;\r\n      } else {\r\n        const { value, done } = horizontals.next();\r\n        if (done) doneHorizontal = true;\r\n        else yield value;\r\n      }\r\n    }\r\n\r\n    if (!doneHorizontal) {\r\n      for (const value of horizontals) {\r\n        yield value;\r\n      }\r\n    }\r\n\r\n    if (!doneVertical) {\r\n      for (const value of verticals) {\r\n        yield value;\r\n      }\r\n    }\r\n  }\r\n\r\n  // public *getNodes(): Generator<{\r\n  //   x: number;\r\n  //   y: number;\r\n  //   board: Board;\r\n  //   orientation: \"vertical\" | \"horizontal\";\r\n  // }, void, void> {\r\n  //   for (let y = 0; y < this.verticals.length; y++) {\r\n  //     for (let x = 0; x < this.verticals[y].length; x++) {\r\n  //       if (this.verticals[y][x] === 0) {\r\n  //         const board = this.copy();\r\n  //         const lastTour = board.tour;\r\n  //         board.play(\"vertical\", x, y);\r\n  //         if (board.tour === lastTour && !board.isFinished()) {\r\n  //           for (const node of board.getNodes()) {\r\n  //             yield { ...node, x, y, orientation: \"vertical\" };\r\n  //           }\r\n  //         }\r\n  //         else yield { x, y, board, orientation: \"vertical\" };\r\n  //       }\r\n  //     }\r\n  //   }\r\n\r\n  //   for (let y = 0; y < this.horizontals.length; y++) {\r\n  //     for (let x = 0; x < this.horizontals[y].length; x++) {\r\n  //       if (this.horizontals[y][x] === 0) {\r\n  //         const board = this.copy();\r\n  //         const lastTour = board.tour;\r\n  //         board.play(\"horizontal\", x, y);\r\n  //         if (board.tour === lastTour && !board.isFinished()) {\r\n  //           for (const node of board.getNodes()) {\r\n  //             yield { ...node, x, y, orientation: \"horizontal\" };\r\n  //           }\r\n  //         }\r\n  //         else yield { x, y, board, orientation: \"horizontal\" };\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n}\r\n\r\n\r\n","import { Board } from \"./game\";\r\n\r\n\r\nexport class MctsNode {\r\n    public wins: number;\r\n    public visits: number;\r\n    private nodes: Map<\"vertical\" | \"horizontal\", Map<number, Map<number, MctsNode>>>;\r\n    public parent: MctsNode | null;\r\n    private board: Board;\r\n    private player: number;\r\n    private simulation: number;\r\n    private c: number\r\n    private generator: Generator<{ orientation: \"vertical\" | \"horizontal\"; x: number; y: number, board: Board }, void, unknown>;\r\n\r\n    constructor(board: Board, player: number, simulation: number, c: number, parent: MctsNode | null = null) {\r\n        this.wins = 0;\r\n        this.visits = 0;\r\n        this.nodes = new Map();\r\n        this.parent = parent;\r\n        this.generator = board.getNodes();\r\n        this.board = board;\r\n        this.simulation = simulation;\r\n        this.player = player;\r\n        this.c = c;\r\n    }\r\n\r\n\r\n    public run() {\r\n        if (this.board.isFinished()) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                this.backpropagation(this.simulate());\r\n            }\r\n            return\r\n        }\r\n\r\n        let newChild = this.expansion()\r\n        if (newChild) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                newChild.backpropagation(newChild.simulate());\r\n            }\r\n        }\r\n        else {\r\n            const { bestNode } = this.selection();\r\n            bestNode.run();\r\n        }\r\n    }\r\n\r\n    private selection(): {\r\n        bestNode: MctsNode;\r\n        x: number;\r\n        y: number;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    } {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits + this.c * Math.sqrt(2 * Math.log(this.visits) / node.visits);\r\n                    if (value > bestValue) {\r\n                        bestValue = value;\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    private simulate() {\r\n        let result = this.board.getNodes().next()\r\n        let endBoard;\r\n        while (!result.done) {\r\n            endBoard = result.value.board;\r\n            result = result.value.board.getNodes().next();\r\n        }\r\n        if (!endBoard) return false;\r\n        return endBoard.getScore()[this.player] > endBoard.getScore()[this.player === 1 ? 0 : 1];\r\n    }\r\n\r\n    private expansion() {\r\n        const { value, done } = this.generator.next();\r\n\r\n        if (done) return false;\r\n\r\n        const { orientation, x, y, board } = value;\r\n        const child = new MctsNode(board, this.player, this.simulation, this.c, this);\r\n        let mapOrientation = this.nodes.get(orientation);\r\n        if (!mapOrientation) {\r\n            mapOrientation = new Map();\r\n            this.nodes.set(orientation, mapOrientation);\r\n        }\r\n\r\n        let mapX = mapOrientation.get(x);\r\n        if (!mapX) {\r\n            mapX = new Map();\r\n            mapOrientation.set(x, mapX);\r\n        }\r\n\r\n        mapX.set(y, child);\r\n\r\n        return child;\r\n    }\r\n\r\n    private backpropagation(won: boolean) {\r\n        if (won) {\r\n            this.wins++;\r\n        }\r\n        this.visits++;\r\n        if (this.parent) {\r\n            this.parent.backpropagation(won);\r\n        }\r\n    }\r\n\r\n    public getBestChild() {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits;\r\n                    if (value > bestValue) {\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestValue = value;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    getNumberVisited() {\r\n        return this.visits;\r\n    }\r\n\r\n}","import { Board } from \"./game\";\r\n\r\nexport default function negamax(\r\n    board: Board,\r\n    depth: number,\r\n    maximizingPlayer: boolean,\r\n    idPlayer: number\r\n  ): {\r\n    x: number;\r\n    y: number;\r\n    value: number;\r\n    orientation: \"vertical\" | \"horizontal\";\r\n  } {\r\n    if (depth === 0 || board.isFinished())\r\n      return {\r\n        x: 0,\r\n        y: 0,\r\n        orientation: \"vertical\",\r\n        value: board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1),\r\n      };\r\n    let value = -Infinity;\r\n    let x = -1,\r\n      y = -1;\r\n    let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n    for (const {\r\n      board: node,\r\n      x: _x,\r\n      y: _y,\r\n      orientation: _orientation,\r\n    } of board.getNodes()) {\r\n      const { value: result } = negamax(node, depth - 1, !maximizingPlayer,idPlayer);\r\n      if (-result > value) {\r\n        value = -result;\r\n        x = _x;\r\n        y = _y;\r\n        orientation = _orientation;\r\n      }\r\n    }\r\n    return { x, y, value, orientation };\r\n  }","import {Board} from \"./game\";\r\n\r\nexport default function nigamax(\r\n    board: Board,\r\n    depth: number,\r\n    maximizingPlayer: boolean,\r\n    idPlayer: number,\r\n    alpha: number = -Infinity,\r\n    beta: number = Infinity\r\n  ): {\r\n    x: number;\r\n    y: number;\r\n    value: number;\r\n    orientation: \"vertical\" | \"horizontal\";\r\n  } {\r\n    if (depth === 0 || board.isFinished()) {\r\n      return {\r\n        x: 0,\r\n        y: 0,\r\n        orientation: \"vertical\",\r\n        value: board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1),\r\n      };\r\n    }\r\n    let value = -Infinity;\r\n    let x = -1,\r\n      y = -1;\r\n    let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n    for (const {\r\n      board: node,\r\n      x: _x,\r\n      y: _y,\r\n      orientation: _orientation,\r\n    } of board.getNodes()) {\r\n      const { value: result } = nigamax(\r\n        node,\r\n        depth - 1,\r\n        !maximizingPlayer,\r\n        idPlayer,\r\n        -beta,\r\n        -alpha\r\n      );\r\n      if (-result > value) {\r\n        value = -result;\r\n        x = _x;\r\n        y = _y;\r\n        orientation = _orientation;\r\n      }\r\n      if (value >= beta) {\r\n        return {\r\n          x,\r\n          y,\r\n          orientation,\r\n          value,\r\n        };\r\n      }\r\n      alpha = Math.max(alpha, value);\r\n    }\r\n    return { x, y, orientation, value };\r\n  }\r\n  ","import { Board } from \"./game\";\r\nimport { MctsNode } from \"./mcts\";\r\nimport negamax from \"./negamax\";\r\nimport nigamax from \"./nigamax\";\r\n\r\ninterface Coup {\r\n    x: number,\r\n    y: number,\r\n    orientation: \"vertical\" | \"horizontal\"\r\n}\r\n\r\nexport abstract class Player extends EventTarget {\r\n    abstract play(board: Board, player: number): Promise<Coup>\r\n}\r\n\r\nexport class HumanPlayer extends Player {\r\n    play(board: Board, player: number) {\r\n        return new Promise<Coup>((resolve) => {\r\n            this.addEventListener(\"play\", (e: Event) => {\r\n                const customEvent = e as CustomEvent<{ x: number, y: number, orientation: \"vertical\" | \"horizontal\" }>;\r\n                resolve(customEvent.detail);\r\n            }, { once: true })\r\n        })\r\n    }\r\n}\r\n\r\nexport abstract class iaPlayer extends Player {\r\n    async play(board: Board, player: number): Promise<Coup> {\r\n        return (await Promise.all([\r\n            (async (): Promise<Coup> => {\r\n                const start = performance.now()\r\n                const result = await this.playIa(board, player)\r\n                const end = performance.now()\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time to play: ${end - start}ms`)\r\n                return result\r\n            })(),\r\n            //delay to see the move\r\n            new Promise<void>((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve()\r\n                }, 500)\r\n            })\r\n        ]))[0]\r\n    }\r\n\r\n    abstract playIa(board: Board, player: number): Promise<Coup>;\r\n}\r\n\r\nexport class MctsPlayer extends iaPlayer {\r\n    private iteration: number;\r\n    private simulation: number;\r\n    private c: number\r\n\r\n    constructor({ iteration, simulation, c }: { iteration: number, simulation: number, c?: number }) {\r\n        super();\r\n        this.iteration = iteration;\r\n        this.simulation = simulation;\r\n        this.c = c || Math.sqrt(2);\r\n    }\r\n\r\n    playIa(board: Board, player: number): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            let root = new MctsNode(board, player, this.simulation, this.c);\r\n            while (root.getNumberVisited() < this.iteration * this.simulation) {\r\n                root.run();\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"tree\", { detail: root }));\r\n            let bestChild = root.getBestChild();\r\n            resolve({ x: bestChild.x, y: bestChild.y, orientation: bestChild.orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class RandomPlayer extends iaPlayer {\r\n    playIa(board: Board, player: number): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { orientation, x, y } = board.getNodes().next().value!\r\n            resolve({ x, y, orientation });\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport class MinimaxPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: number): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            resolve(negamax(board, this.depth, true, player));\r\n        })\r\n    }\r\n}\r\n\r\nexport class FastestPlayer extends iaPlayer {\r\n    private depth: number;\r\n    private ias: (\"minimax\" | \"alphabeta\" | \"mcts\")[] = [\"minimax\", \"alphabeta\", \"mcts\"]\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: number) {\r\n        const workers: Worker[] = []\r\n\r\n        return Promise.race(this.ias.map(ia => {\r\n            return new Promise<[Coup, typeof ia]>((resolve) => {\r\n                const worker = new Worker(new URL(\"../playerWorker.ts\", import.meta.url));\r\n                workers.push(worker)\r\n                worker.postMessage({ board: JSON.parse(JSON.stringify(board)), depth: this.depth, player, type: ia });\r\n                worker.addEventListener(\"message\", (e) => {\r\n                    resolve([e.data, ia]);\r\n                })\r\n            })\r\n        })).then(([coup, ia]) => {\r\n            workers.forEach(worker => worker.terminate())\r\n            console.log(ia)\r\n            return coup\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport class AlphaBetaPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: number) {\r\n        return new Promise<Coup>((resolve) => {\r\n            resolve(nigamax(board, this.depth, true, player));\r\n        })\r\n    }\r\n}\r\n","import { Board } from \"./utils/game\";\r\nimport { AlphaBetaPlayer, HumanPlayer, MctsPlayer, MinimaxPlayer, Player, RandomPlayer } from \"./utils/player\";\r\n\r\ndeclare var self: DedicatedWorkerGlobalScope;\r\n\r\n//remove console.log\r\nconsole.log = () => { }\r\n\r\nself.addEventListener(\"message\", ({ data: { board, player, type } }: {\r\n    data: {\r\n        board: any, player: any, type: string\r\n    }\r\n}) => {\r\n    let playerType: Player;\r\n    switch (type) {\r\n        case \"human\":\r\n            playerType = new HumanPlayer()\r\n            break;\r\n        case \"random\":\r\n            playerType = new RandomPlayer()\r\n            break;\r\n        case \"minimax\":\r\n            playerType = new MinimaxPlayer({ depth: 3 })\r\n            break;\r\n        case \"alphabeta\":\r\n            playerType = new AlphaBetaPlayer({ depth: 3 })\r\n            break;\r\n        case \"mcts\":\r\n            playerType = new MctsPlayer({ iteration: 1000, c: 1.41, simulation: 10 })\r\n            break;\r\n        default:\r\n            throw new Error(\"Invalid player type\")\r\n    }\r\n\r\n\r\n    playerType.play(new Board(board), player).then((coup) => {\r\n        self.postMessage(coup);\r\n    })\r\n});\r\n\r\n\r\n\r\nexport { };\r\n\r\n","// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"e40292d6\" + \".chunk.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t472: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[4472](0, __webpack_exports__, __webpack_require__);\n"],"names":["EventTarget","Board","constructor","BoardOrSize","super","cells","verticals","horizontals","score","tour","this","Array","fill","map","getCells","getVerticals","getHorizontals","getScore","getTour","play","orientation","x","y","result","check","push","length","forEach","cell","dispatchEvent","CustomEvent","detail","isFinished","winner","_this$horizontals","evaluation","idPlayer","copy","board","row","getNodesVertical","playable","flatMap","value","filter","_ref","splice","Math","floor","random","lastTour","node","getNodes","getNodesHorizontal","_ref2","doneHorizontal","doneVertical","done","next","MctsNode","player","simulation","c","parent","arguments","undefined","wins","visits","nodes","generator","Map","run","i","backpropagation","simulate","newChild","expansion","bestNode","selection","bestValue","Infinity","_orientation","_x","_y","sqrt","log","endBoard","child","mapOrientation","get","set","mapX","won","getBestChild","getNumberVisited","negamax","depth","maximizingPlayer","nigamax","alpha","beta","max","Player","HumanPlayer","Promise","resolve","addEventListener","e","once","iaPlayer","all","start","performance","now","playIa","end","console","concat","name","setTimeout","MctsPlayer","iteration","root","bestChild","RandomPlayer","MinimaxPlayer","AlphaBetaPlayer","_ref5","self","playerType","data","type","Error","then","coup","postMessage","__webpack_require__","m","__webpack_modules__","u","chunkId","o","obj","prop","Object","prototype","hasOwnProperty","call","p","b","location"],"sourceRoot":""}