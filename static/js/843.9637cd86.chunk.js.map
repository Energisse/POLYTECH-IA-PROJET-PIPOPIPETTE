{"version":3,"file":"static/js/843.9637cd86.chunk.js","mappings":"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","sources":["utils/board.ts","utils/players/Player.ts","utils/players/IAPlayer.ts","utils/players/AlphaBetaPlayer.ts","utils/nigamax.ts","utils/mcts.ts","utils/players/MCTSPlayer.ts","utils/players/MinimaxPlayer.ts","utils/negamax.ts","utils/playerWorker.ts"],"sourcesContent":["export type NodeGenerator = Generator<\r\n    {\r\n        x: number;\r\n        y: number;\r\n        board: Board;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n>;\r\n\r\nexport interface Coup {\r\n    x: number,\r\n    y: number,\r\n    orientation: \"vertical\" | \"horizontal\"\r\n}\r\n\r\nexport type PlayValue = -1 | 0 | 1;\r\nexport type PlayerValue = 0 | 1;\r\n\r\nexport class Board {\r\n    readonly cells: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly verticals: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly horizontals: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly previousBoard: Board | null = null;\r\n    readonly score: readonly [number, number] = [0, 0];\r\n    readonly tour: PlayerValue = 0;\r\n\r\n    constructor(size: number);\r\n    constructor(board: { cells: PlayValue[][]; verticals: PlayValue[][]; horizontals: PlayValue[][]; score: [number, number]; tour: PlayerValue, previousBoard?: Board });\r\n    constructor(BoardOrSize: number | { cells: PlayValue[][]; verticals: PlayValue[][]; horizontals: PlayValue[][]; score: [number, number]; tour: PlayerValue, previousBoard?: Board }) {\r\n        if (typeof BoardOrSize === \"number\") {\r\n            this.cells = new Array(BoardOrSize).fill(0).map(() => new Array(BoardOrSize).fill(-1));\r\n            this.verticals = new Array(BoardOrSize)\r\n                .fill(0)\r\n                .map(() => new Array(BoardOrSize + 1).fill(-1));\r\n            this.horizontals = new Array(BoardOrSize + 1)\r\n                .fill(0)\r\n                .map(() => new Array(BoardOrSize).fill(-1));\r\n            this.score = [0, 0];\r\n            this.tour = 0;\r\n        } else {\r\n            this.cells = BoardOrSize.cells;\r\n            this.verticals = BoardOrSize.verticals;\r\n            this.horizontals = BoardOrSize.horizontals;\r\n            this.score = BoardOrSize.score;\r\n            this.tour = BoardOrSize.tour;\r\n            this.previousBoard = BoardOrSize.previousBoard || null;\r\n        }\r\n    }\r\n\r\n    public getWinner(): -1 | 0 | 1 {\r\n        return this.score[0] > this.score[1] ? 0 : this.score[0] < this.score[1] ? 1 : -1;\r\n    }\r\n\r\n    public play(\r\n        orientation: \"vertical\" | \"horizontal\",\r\n        x: number,\r\n        y: number\r\n    ): Board | null {\r\n\r\n        const newHorizontals = this.horizontals.map((row) => [...row]);\r\n        const newVerticals = this.verticals.map((row) => [...row]);\r\n        const newCells = this.cells.map((row) => [...row]);\r\n        const newScore = [...this.score];\r\n        let newTour = this.tour;\r\n\r\n        if (orientation === \"vertical\") {\r\n            if (newVerticals[y][x] !== -1) {\r\n                console.error(\"Invalid move \" + orientation + x + y)\r\n                return null;\r\n            }\r\n            newVerticals[y][x] = this.tour;\r\n        } else {\r\n            if (newHorizontals[y][x] !== -1) {\r\n                console.error(\"Invalid move \" + orientation + x + y);\r\n                return null;\r\n            }\r\n            newHorizontals[y][x] = this.tour;\r\n\r\n\r\n        }\r\n\r\n        const cells: Array<[x: number, y: number]> = [];\r\n\r\n        if (orientation === \"horizontal\") {\r\n            let result = this.check(newHorizontals, newVerticals, x, y);\r\n            if (result) cells.push(result);\r\n            result = this.check(newHorizontals, newVerticals, x, y - 1);\r\n            if (result) cells.push(result);\r\n        } else {\r\n            let result = this.check(newHorizontals, newVerticals, x, y);\r\n            if (result) cells.push(result);\r\n            result = this.check(newHorizontals, newVerticals, x - 1, y);\r\n            if (result) cells.push(result);\r\n        }\r\n\r\n        if (!cells.length) {\r\n            newTour = newTour === 1 ? 0 : 1;\r\n        } else {\r\n            newScore[newTour] += cells.length;\r\n\r\n            cells.forEach((cell) => {\r\n                newCells[cell[1]][cell[0]] = newTour;\r\n            });\r\n        }\r\n\r\n        return new Board({\r\n            cells: newCells,\r\n            verticals: newVerticals,\r\n            horizontals: newHorizontals,\r\n            score: newScore as [number, number],\r\n            tour: newTour,\r\n            previousBoard: this\r\n        });\r\n    }\r\n\r\n    public isFinished() {\r\n        return this.score[0] > this.cells.length ** 2 / 2 || this.score[1] > this.cells.length ** 2 / 2 || this.score[0] + this.score[1] === this.cells.length ** 2;\r\n    }\r\n\r\n    private check(horizontals: PlayValue[][], verticals: PlayValue[][], x: number, y: number): false | [x: number, y: number] {\r\n        if (x < 0 || x >= this.cells.length || y < 0 || y >= this.cells.length) {\r\n            return false;\r\n        }\r\n        if (\r\n            verticals[y][x] !== -1 &&\r\n            verticals[y][x + 1] !== -1 &&\r\n            horizontals[y][x] !== -1 &&\r\n            horizontals[y + 1]?.[x] !== -1\r\n        ) {\r\n            return [x, y];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public evaluation(idPlayer: PlayerValue) {\r\n        return this.score[idPlayer] - this.score[idPlayer === 1 ? 0 : 1];\r\n    }\r\n\r\n\r\n    public *getNodes(depthLimit?: number): NodeGenerator {\r\n        const playable = [\r\n            ...this.verticals\r\n                .flatMap((row, y) => row.map((value, x) => ({ x, y, value, orientation: \"vertical\" } satisfies Coup & { value: number }))),\r\n            ...this.horizontals\r\n                .flatMap((row, y) => row.map((value, x) => ({ x, y, value, orientation: \"horizontal\" } satisfies Coup & { value: number })))\r\n        ]\r\n            .filter(({ value }) => value === -1)\r\n\r\n\r\n        let currentIndex = playable.length;\r\n        while (currentIndex !== 0) {\r\n\r\n            let randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n\r\n            // And swap it with the current element.\r\n            [playable[currentIndex], playable[randomIndex]] = [\r\n                playable[randomIndex], playable[currentIndex]];\r\n        }\r\n\r\n        for (let i = 0; i < playable.length; i++) {\r\n            const { x, y, orientation } = playable[i];\r\n            const board = this.play(orientation, x, y)!;\r\n            if (board.tour === board.previousBoard!.tour && !board.isFinished() && (depthLimit === undefined || depthLimit > 0)) {\r\n                for (const node of board.getNodes(depthLimit ? depthLimit - 1 : undefined)) {\r\n                    yield { ...node, x, y, orientation };\r\n                }\r\n            } else yield { x, y, board, orientation };\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Board, Coup, PlayerValue } from \"../board\";\r\n\r\n/**\r\n * Classe abstraite représentant un joueur dans le jeu.\r\n * Étend la classe EventTarget pour gérer les événements.\r\n */\r\nexport abstract class Player extends EventTarget {\r\n    /**\r\n     * Le temps total pris par le joueur.\r\n     */\r\n    protected totalTime: number = 0;\r\n\r\n    /**\r\n     * Le nombre total de mouvements effectués par le joueur.\r\n     */\r\n    protected totalMove: number = 0;\r\n\r\n    /**\r\n     * Un tableau pour stocker les temps pris pour chaque mouvement.\r\n     */\r\n    protected times: number[] = [];\r\n\r\n    /**\r\n     * Méthode abstraite à implémenter par les sous-classes pour effectuer un mouvement.\r\n     * \r\n     * @param {Board} board - Le plateau de jeu actuel.\r\n     * @param {PlayerValue} player - La valeur du joueur actuel.\r\n     * @returns {Promise<Coup>} - Une promesse qui se résout avec le coup joué.\r\n     */\r\n    abstract play(board: Board, player: PlayerValue): Promise<Coup>;\r\n}\r\n","import { Board, Coup, PlayerValue } from \"../board\";\r\nimport { Player } from \"./Player\";\r\n\r\n/**\r\n * Classe abstraite représentant un joueur IA.\r\n */\r\nexport abstract class IaPlayer extends Player {\r\n\r\n    /**\r\n     * Le temps minimal pour jouer un coup.\r\n     */\r\n    protected minTimeToPlay: number = 0;\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {number} minTimeToPlay - Le temps minimal pour jouer un coup.\r\n     */\r\n    constructor({ minTimeToPlay }: { minTimeToPlay?: number }) {\r\n        super()\r\n        this.minTimeToPlay = minTimeToPlay || 500;\r\n    }\r\n\r\n    /**\r\n     * Joue un coup sur le plateau.\r\n     * \r\n     * @param {Board} board - Le plateau de jeu actuel.\r\n     * @param {PlayerValue} player - La valeur du joueur actuel.\r\n     * @returns {Promise<Coup>} - Une promesse qui se résout avec le coup joué.\r\n     */\r\n    async play(board: Board, player: PlayerValue): Promise<Coup> {\r\n        return (await Promise.all([\r\n            new Promise<Coup>(async (resolve) => {\r\n                const start = performance.now();\r\n                const result = await this.playIa(board, player);\r\n                const end = performance.now();\r\n\r\n                this.totalTime += end - start;\r\n                this.totalMove++;\r\n                this.times.push(end - start);\r\n\r\n                console.log(`Player ${player} (${this.constructor.name}) Time: ${end - start}ms Average time: ${this.totalTime / this.totalMove}ms`);\r\n\r\n                resolve(result);\r\n            }),\r\n            //Temps minimal de pour jouer\r\n            new Promise<void>((resolve) => setTimeout(resolve, this.minTimeToPlay))\r\n        ]))[0]\r\n    }\r\n\r\n    /**\r\n     * Méthode abstraite pour jouer un coup IA.\r\n     * \r\n     * @param {Board} board - Le plateau de jeu actuel.\r\n     * @param {PlayerValue} player - La valeur du joueur actuel.\r\n     * @returns {Promise<Coup>} - Une promesse qui se résout avec le coup joué.\r\n     */\r\n    abstract playIa(board: Board, player: PlayerValue): Promise<Coup>;\r\n}","import { Board, Coup, PlayerValue } from \"../board\";\r\nimport nigamax from \"../nigamax\";\r\nimport { IaPlayer } from \"./IAPlayer\";\r\n\r\nexport class AlphaBetaPlayer extends IaPlayer {\r\n    private depth: number;\r\n\r\n    private depthLimit?: number;\r\n\r\n    constructor(paramters: { depth: number, minTimeToPlay?: number, depthLimit?: number }) {\r\n        super(paramters);\r\n        this.depth = paramters.depth;\r\n        this.depthLimit = paramters.depthLimit;\r\n    }\r\n\r\n    playIa(board: Board, player: PlayerValue) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = nigamax(board, this.depth, player, this.depthLimit)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\n","import { Board, Coup, PlayerValue } from \"./board\";\r\n\r\nexport default function nigamax(board: Board, _depth: number, idPlayer: PlayerValue, depthLimit?: number): Coup & {\r\n  nodes: number;\r\n  value: number;\r\n} {\r\n  let coup: Coup = { x: 0, y: 0, orientation: \"horizontal\" };\r\n  let nodes = 0;\r\n\r\n  //key is horizontals stringified + verticals stringified + score stringified + nextPlayer stringified\r\n  //value is the evaluation\r\n  const history = new Map<string, number>();\r\n\r\n  function generateKey(board: Board): string {\r\n    return `${board.horizontals.map(h => h.map(e => e !== -1 ? 1 : 0).join(\"\")).join(\"\")}${board.verticals.map(h => h.map(e => e !== -1 ? 1 : 0).join(\"\")).join(\"\")}${board.score.join(\"\")}${board.tour}`;\r\n  }\r\n\r\n\r\n  function _nigamax(board: Board, depth: number, maximizingPlayer: boolean, alpha: number = -Infinity, beta: number = Infinity): number {\r\n    if (depth === 0 || board.isFinished())\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n\r\n    let value = -Infinity;\r\n\r\n    for (const { board: node, ...coupPlayed } of board.getNodes(depthLimit)) {\r\n      nodes++;\r\n      const key = generateKey(node);\r\n\r\n      if (history.has(key)) {\r\n        value = Math.max(value, history.get(generateKey(node))!);\r\n      }\r\n      else {\r\n        const result = _nigamax(node, depth - 1, !maximizingPlayer, -beta, -alpha);\r\n        history.set(key, -result);\r\n\r\n        if (-result > value) {\r\n          if (depth === _depth) coup = coupPlayed\r\n          value = -result;\r\n        }\r\n      }\r\n\r\n      if (value >= beta) return value\r\n\r\n      alpha = Math.max(alpha, value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  const value = _nigamax(board, _depth, true)\r\n\r\n  return {\r\n    value,\r\n    ...coup,\r\n    nodes\r\n  };\r\n}\r\n","import { Board } from \"./board\";\r\n\r\nexport class MctsNode {\r\n    public wins: number;\r\n    public visits: number;\r\n    public nodes: Map<\"vertical\" | \"horizontal\", Map<number, Map<number, MctsNode>>>;\r\n    public parent: MctsNode | null;\r\n    private board: Board;\r\n    private player: 0 | 1;\r\n    private simulation: number;\r\n    private c: number\r\n    private generator: Generator<{ orientation: \"vertical\" | \"horizontal\"; x: number; y: number, board: Board }, void, unknown>;\r\n\r\n    constructor(board: Board, player: 0 | 1, simulation: number, c: number, parent: MctsNode | null = null) {\r\n        this.wins = 0;\r\n        this.visits = 0;\r\n        this.nodes = new Map();\r\n        this.parent = parent;\r\n        this.generator = board.getNodes();\r\n        this.board = board;\r\n        this.simulation = simulation;\r\n        this.player = player;\r\n        this.c = c;\r\n    }\r\n\r\n\r\n    public run() {\r\n        if (this.board.isFinished()) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                this.backpropagation(this.simulate());\r\n            }\r\n            return\r\n        }\r\n\r\n        let newChild = this.expansion()\r\n\r\n        if (newChild) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                newChild.backpropagation(newChild.simulate());\r\n            }\r\n        }\r\n        else {\r\n            const { bestNode } = this.selection();\r\n            bestNode.run();\r\n        }\r\n    }\r\n\r\n    private selection(): {\r\n        bestNode: MctsNode;\r\n        x: number;\r\n        y: number;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    } {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits + this.c * Math.sqrt(2 * Math.log(this.visits) / node.visits);\r\n                    if (value > bestValue) {\r\n                        bestValue = value;\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    private simulate() {\r\n        let board = this.board;\r\n        while (true) {\r\n            const { value, done } = board.getNodes().next();\r\n            if (done) break;\r\n            board = value.board\r\n        }\r\n        return board.getWinner() === this.player;\r\n    }\r\n\r\n    private expansion() {\r\n        const { value, done } = this.generator.next();\r\n\r\n        if (done) return false;\r\n\r\n        const { orientation, x, y, board } = value;\r\n        const child = new MctsNode(board, this.player, this.simulation, this.c, this);\r\n        let mapOrientation = this.nodes.get(orientation);\r\n        if (!mapOrientation) {\r\n            mapOrientation = new Map();\r\n            this.nodes.set(orientation, mapOrientation);\r\n        }\r\n\r\n        let mapX = mapOrientation.get(x);\r\n        if (!mapX) {\r\n            mapX = new Map();\r\n            mapOrientation.set(x, mapX);\r\n        }\r\n\r\n        mapX.set(y, child);\r\n\r\n        return child;\r\n    }\r\n\r\n    private backpropagation(won: boolean) {\r\n        if (won) {\r\n            this.wins++;\r\n        }\r\n        this.visits++;\r\n        if (this.parent) {\r\n            this.parent.backpropagation(won);\r\n        }\r\n    }\r\n\r\n    public getBestChild() {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits;\r\n                    if (value > bestValue) {\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestValue = value;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    getNumberVisited() {\r\n        return this.visits;\r\n    }\r\n\r\n}","import { Board, Coup, PlayerValue } from \"../board\";\r\nimport { MctsNode } from \"../mcts\";\r\nimport { IaPlayer } from \"./IAPlayer\";\r\n\r\n/**\r\n * Classe représentant un joueur IA qui joue avec l'algorithme MCTS.\r\n * @extends IaPlayer\r\n */\r\nexport class MctsPlayer extends IaPlayer {\r\n\r\n    /**\r\n     * Le nombre d'itérations\r\n     */\r\n    private iteration: number;\r\n\r\n    /**\r\n     * Le nombre de simulations par itération.\r\n     */\r\n    private simulation: number;\r\n\r\n    /**\r\n     * La constante C pour l'exploration.\r\n     */\r\n    private c: number\r\n\r\n    /**\r\n     * Le dernier plateau joué.\r\n     */\r\n    private lastBoard: Board | null = null;\r\n\r\n    /**\r\n     * Le dernier noeud joué.\r\n     */\r\n    private lastNode: MctsNode | null = null;\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {number} iteration - Le nombre d'itérations.\r\n     * @param {number} simulation - Le nombre de simulations par itération.\r\n     * @param {number} c - La constante C pour l'exploration.\r\n     * @param {number} minTimeToPlay - Le temps minimal pour jouer un coup.\r\n     */\r\n    constructor(parameters: { iteration: number, simulation: number, c?: number, minTimeToPlay?: number }) {\r\n        super(parameters);\r\n        this.iteration = parameters.iteration;\r\n        this.simulation = parameters.simulation;\r\n        this.c = parameters.c || Math.sqrt(2);\r\n    }\r\n\r\n\r\n    /**\r\n     * Joue un coup sur le plateau.\r\n     * \r\n     * @param {Board} board - Le plateau de jeu actuel.\r\n     * @param {PlayerValue} player - La valeur du joueur actuel.\r\n     * @returns {Promise<Coup>} - Une promesse qui se résout avec le coup joué.\r\n     */\r\n    playIa(board: Board, player: PlayerValue): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            let bestNode: MctsNode | null = null;\r\n            if (this.lastBoard && this.lastNode) {\r\n                const played = this.lastBoard\r\n                    .horizontals\r\n                    .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.horizontals[y][x] !== -1 ? { x, y, orientation: \"horizontal\" } : null))\r\n                    .filter(x => x)\r\n                    .concat(\r\n                        this.lastBoard\r\n                            .verticals\r\n                            .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.verticals[y][x] !== -1 ? { x, y, orientation: \"vertical\" } : null))\r\n                            .filter(x => x)\r\n                    ) as { x: number, y: number, orientation: \"vertical\" | \"horizontal\" }[]\r\n\r\n                if (played.length === 0) {\r\n                    bestNode = this.lastNode;\r\n                }\r\n\r\n\r\n                let bestValue = -Infinity;\r\n                if (played.length > 0) {\r\n                    for (const coup of permute(played)) {\r\n                        let currentNode: MctsNode | null = this.lastNode!.nodes.get(coup[0].orientation)?.get(coup[0].x)?.get(coup[0].y) || null;\r\n                        for (let i = 1; i < coup.length; i++) {\r\n                            currentNode = currentNode?.nodes.get(coup[i].orientation)?.get(coup[i].x)?.get(coup[i].y) || null;\r\n                            if (!currentNode) break;\r\n                        }\r\n                        if (currentNode) {\r\n                            if (currentNode.wins > bestValue) {\r\n                                bestValue = currentNode.wins;\r\n                                bestNode = currentNode;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            let root = bestNode || new MctsNode(board, player, this.simulation, this.c);\r\n            while (root.getNumberVisited() < this.iteration * this.simulation) {\r\n                root.run();\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"tree\", { detail: root }));\r\n            let bestChild = root.getBestChild();\r\n            this.lastNode = bestChild.bestNode;\r\n            this.lastBoard = board.play(bestChild.orientation, bestChild.x, bestChild.y);\r\n            resolve({ x: bestChild.x, y: bestChild.y, orientation: bestChild.orientation });\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction permute<T>(arr: T[]): T[][] {\r\n    let results: T[][] = [];\r\n\r\n    function permuteRecursively(subArr: T[], memo: T[]) {\r\n        if (subArr.length === 0) {\r\n            results.push(memo.slice());\r\n        } else {\r\n            for (let i = 0; i < subArr.length; i++) {\r\n                let curr = subArr.slice();\r\n                let next = curr.splice(i, 1);\r\n                permuteRecursively(curr, memo.concat(next));\r\n            }\r\n        }\r\n    }\r\n\r\n    permuteRecursively(arr, []);\r\n    return results;\r\n}","import { Board, Coup } from \"../board\";\r\nimport negamax from \"../negamax\";\r\nimport { IaPlayer } from \"./IAPlayer\";\r\n\r\nexport class MinimaxPlayer extends IaPlayer {\r\n    private depth: number;\r\n\r\n    private depthLimit?: number;\r\n\r\n    constructor(paramters: { depth: number, minTimeToPlay?: number, depthLimit?: number }) {\r\n        super(paramters);\r\n        this.depth = paramters.depth;\r\n        this.depthLimit = paramters.depthLimit;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = negamax(board, this.depth, player, this.depthLimit)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}","import { Board, Coup, PlayerValue } from \"./board\";\r\n\r\nexport default function negamax(board: Board, _depth: number, idPlayer: PlayerValue, depthLimit?: number): Coup & {\r\n  nodes: number;\r\n  value: number;\r\n} {\r\n  let coup: Coup = { x: 0, y: 0, orientation: \"horizontal\" };\r\n  let nodes = 0;\r\n\r\n  //key is horizontals stringified + verticals stringified + score stringified + nextPlayer stringified\r\n  //value is the evaluation\r\n  const history = new Map<string, number>();\r\n\r\n  function generateKey(board: Board): string {\r\n    return `${board.horizontals.map(h => h.map(e => e !== -1 ? 1 : 0).join(\"\")).join(\"\")}${board.verticals.map(h => h.map(e => e !== -1 ? 1 : 0).join(\"\")).join(\"\")}${board.score.join(\"\")}${board.tour}`;\r\n  }\r\n\r\n  function _negamax(board: Board, depth: number, maximizingPlayer: boolean): number {\r\n    if (depth === 0 || board.isFinished())\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n\r\n    let value = -Infinity;\r\n\r\n    for (const { board: node, ...coupPlayed } of board.getNodes(depthLimit)) {\r\n      nodes++;\r\n      const key = generateKey(node);\r\n\r\n      if (history.has(key)) {\r\n        value = Math.max(value, history.get(generateKey(node))!);\r\n        continue;\r\n      }\r\n\r\n      const result = _negamax(node, depth - 1, !maximizingPlayer);\r\n\r\n      history.set(key, -result);\r\n\r\n      if (-result > value) {\r\n        if (depth === _depth) coup = coupPlayed\r\n        value = -result;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  const value = _negamax(board, _depth, true)\r\n\r\n  return {\r\n    ...coup,\r\n    value,\r\n    nodes\r\n  };\r\n}","import { Board } from \"./board\";\r\nimport { AlphaBetaPlayer } from \"./players/AlphaBetaPlayer\";\r\nimport { FastestPlayer } from \"./players/FastestPlayer\";\r\nimport { MctsPlayer } from \"./players/MCTSPlayer\";\r\nimport { MinimaxPlayer } from \"./players/MinimaxPlayer\";\r\nimport { Player } from \"./players/Player\";\r\n\r\ndeclare var self: DedicatedWorkerGlobalScope;\r\n\r\n//remove console.log\r\nconsole.log = () => { }\r\n\r\nself.addEventListener(\"message\", ({ data: { board, player, type, parameters } }: {\r\n    data: {\r\n        board: any, player: any, type: string, parameters: typeof FastestPlayer.prototype.parameters\r\n    }\r\n}) => {\r\n    let playerType: Player;\r\n    switch (type) {\r\n        case \"minimax\":\r\n            playerType = new MinimaxPlayer(parameters)\r\n            break;\r\n        case \"alphabeta\":\r\n            playerType = new AlphaBetaPlayer(parameters)\r\n            break;\r\n        case \"mcts\":\r\n            playerType = new MctsPlayer(parameters)\r\n            break;\r\n        default:\r\n            throw new Error(\"Invalid player type\")\r\n    }\r\n\r\n\r\n    playerType.play(new Board(board), player).then(self.postMessage)\r\n});\r\n\r\nexport { };\r\n\r\n"],"names":["Board","constructor","BoardOrSize","cells","verticals","horizontals","previousBoard","score","tour","this","Array","fill","map","getWinner","play","orientation","x","y","newHorizontals","row","newVerticals","newCells","newScore","newTour","console","error","result","check","push","length","forEach","cell","isFinished","_horizontals","evaluation","idPlayer","getNodes","depthLimit","playable","flatMap","value","filter","_ref","currentIndex","randomIndex","Math","floor","random","i","board","undefined","node","Player","EventTarget","arguments","totalTime","totalMove","times","IaPlayer","minTimeToPlay","super","player","Promise","all","async","start","performance","now","playIa","end","log","name","resolve","setTimeout","AlphaBetaPlayer","paramters","depth","nodes","coup","_depth","history","Map","generateKey","h","e","join","_nigamax","maximizingPlayer","alpha","beta","Infinity","coupPlayed","key","has","max","get","set","nigamax","MctsNode","simulation","c","parent","wins","visits","generator","run","backpropagation","simulate","newChild","expansion","bestNode","selection","bestValue","_orientation","_x","_y","sqrt","done","next","child","mapOrientation","mapX","won","getBestChild","getNumberVisited","MctsPlayer","parameters","iteration","lastBoard","lastNode","played","concat","arr","results","permuteRecursively","subArr","memo","slice","curr","splice","permute","_nodes$get","_nodes$get$get","currentNode","_currentNode","_currentNode$nodes$ge","_currentNode$nodes$ge2","root","dispatchEvent","CustomEvent","detail","bestChild","MinimaxPlayer","_negamax","negamax","self","addEventListener","playerType","data","type","Error","then","postMessage"],"sourceRoot":""}