{"version":3,"file":"static/js/856.42225515.chunk.js","mappings":"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","sources":["utils/board.ts","utils/mcts.ts","utils/player.ts","utils/negamax.ts","utils/nigamax.ts","playerWorker.ts","../webpack/bootstrap","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/startup"],"sourcesContent":["import { Coup } from \"./player\";\r\n\r\nexport type NodeGenerator = Generator<\r\n    {\r\n        x: number;\r\n        y: number;\r\n        board: Board;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n>;\r\n\r\nexport type PlayValue = -1 | 0 | 1;\r\nexport type PlayerValue = 0 | 1;\r\n\r\nexport class Board {\r\n    readonly cells: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly verticals: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly horizontals: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly previousBoard: Board | null = null;\r\n    readonly score: readonly [number, number] = [0, 0];\r\n    readonly tour: PlayerValue = 0;\r\n\r\n    constructor(size: number);\r\n    constructor(board: { cells: PlayValue[][]; verticals: PlayValue[][]; horizontals: PlayValue[][]; score: [number, number]; tour: PlayerValue, previousBoard?: Board });\r\n    constructor(BoardOrSize: number | { cells: PlayValue[][]; verticals: PlayValue[][]; horizontals: PlayValue[][]; score: [number, number]; tour: PlayerValue, previousBoard?: Board }) {\r\n        if (typeof BoardOrSize === \"number\") {\r\n            this.cells = new Array(BoardOrSize).fill(0).map(() => new Array(BoardOrSize).fill(-1));\r\n            this.verticals = new Array(BoardOrSize)\r\n                .fill(0)\r\n                .map(() => new Array(BoardOrSize + 1).fill(-1));\r\n            this.horizontals = new Array(BoardOrSize + 1)\r\n                .fill(0)\r\n                .map(() => new Array(BoardOrSize).fill(-1));\r\n            this.score = [0, 0];\r\n            this.tour = 0;\r\n        } else {\r\n            this.cells = BoardOrSize.cells;\r\n            this.verticals = BoardOrSize.verticals;\r\n            this.horizontals = BoardOrSize.horizontals;\r\n            this.score = BoardOrSize.score;\r\n            this.tour = BoardOrSize.tour;\r\n            this.previousBoard = BoardOrSize.previousBoard || null;\r\n        }\r\n    }\r\n\r\n    public getCells(): ReadonlyArray<ReadonlyArray<PlayValue>> {\r\n        return this.cells;\r\n    }\r\n\r\n    public getVerticals(): ReadonlyArray<ReadonlyArray<PlayValue>> {\r\n        return this.verticals;\r\n    }\r\n\r\n    public getHorizontals(): ReadonlyArray<ReadonlyArray<PlayValue>> {\r\n        return this.horizontals;\r\n    }\r\n\r\n    public getScore(): readonly [number, number] {\r\n        return this.score;\r\n    }\r\n\r\n    public getWinner(): 0 | 1 | null {\r\n        if (this.score[0] > this.cells.length ** 2 / 2) return 0;\r\n        if (this.score[1] > this.cells.length ** 2 / 2) return 1;\r\n        return null;\r\n    }\r\n\r\n    public getTour(): PlayerValue {\r\n        return this.tour;\r\n    }\r\n\r\n    public play(\r\n        orientation: \"vertical\" | \"horizontal\",\r\n        x: number,\r\n        y: number\r\n    ): Board | null {\r\n\r\n        const newHorizontals = this.horizontals.map((row) => [...row]);\r\n        const newVerticals = this.verticals.map((row) => [...row]);\r\n        const newCells = this.cells.map((row) => [...row]);\r\n        const newScore = [...this.score];\r\n        let newTour = this.tour;\r\n\r\n        if (orientation === \"vertical\") {\r\n            if (newVerticals[y][x] !== -1) throw new Error(\"Invalid move\");\r\n            newVerticals[y][x] = this.tour;\r\n        } else {\r\n            if (newHorizontals[y][x] !== -1) throw new Error(\"Invalid move\");\r\n            newHorizontals[y][x] = this.tour;\r\n\r\n\r\n        }\r\n\r\n        const cells: Array<[x: number, y: number]> = [];\r\n\r\n        if (orientation === \"horizontal\") {\r\n            let result = this.check(newHorizontals, newVerticals, x, y);\r\n            if (result) cells.push(result);\r\n            result = this.check(newHorizontals, newVerticals, x, y - 1);\r\n            if (result) cells.push(result);\r\n        } else {\r\n            let result = this.check(newHorizontals, newVerticals, x, y);\r\n            if (result) cells.push(result);\r\n            result = this.check(newHorizontals, newVerticals, x - 1, y);\r\n            if (result) cells.push(result);\r\n        }\r\n\r\n        if (!cells.length) {\r\n            newTour = newTour === 1 ? 0 : 1;\r\n        } else {\r\n            newScore[newTour] += cells.length;\r\n\r\n            cells.forEach((cell) => {\r\n                newCells[cell[1]][cell[0]] = newTour;\r\n            });\r\n        }\r\n\r\n        return new Board({\r\n            cells: newCells,\r\n            verticals: newVerticals,\r\n            horizontals: newHorizontals,\r\n            score: newScore as [number, number],\r\n            tour: newTour,\r\n            previousBoard: this\r\n        });\r\n    }\r\n\r\n    public isFinished() {\r\n        return this.score[0] > this.cells.length ** 2 / 2 || this.score[1] > this.cells.length ** 2 / 2 || this.score[0] + this.score[1] === this.cells.length ** 2;\r\n    }\r\n\r\n    private check(horizontals: PlayValue[][], verticals: PlayValue[][], x: number, y: number): false | [x: number, y: number] {\r\n        if (x < 0 || x >= this.cells.length || y < 0 || y >= this.cells.length) {\r\n            return false;\r\n        }\r\n        if (\r\n            verticals[y][x] !== -1 &&\r\n            verticals[y][x + 1] !== -1 &&\r\n            horizontals[y][x] !== -1 &&\r\n            horizontals[y + 1]?.[x] !== -1\r\n        ) {\r\n            return [x, y];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public evaluation(idPlayer: PlayerValue) {\r\n        return this.score[idPlayer] - this.score[idPlayer === 1 ? 0 : 1];\r\n    }\r\n\r\n\r\n    public *getNodes(): NodeGenerator {\r\n        const playable = [\r\n            ...this.verticals\r\n                .flatMap((row, y) => row.map((value, x) => ({ x, y, value, orientation: \"vertical\" } satisfies Coup & { value: number })))\r\n                .filter(({ value }) => value === -1),\r\n            ...this.horizontals\r\n                .flatMap((row, y) => row.map((value, x) => ({ x, y, value, orientation: \"horizontal\" } satisfies Coup & { value: number })))\r\n                .filter(({ value }) => value === -1)\r\n        ]\r\n\r\n        while (playable.length > 0) {\r\n            const { x, y, orientation } = playable.splice(\r\n                Math.floor(Math.random() * playable.length),\r\n                1\r\n            )[0];\r\n            const board = this.play(orientation, x, y)!;\r\n            if (board.tour === board.previousBoard!.tour && !board.isFinished()) {\r\n                for (const node of board.getNodes()) {\r\n                    yield { ...node, x, y, orientation };\r\n                }\r\n            } else yield { x, y, board, orientation };\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Board } from \"./board\";\r\n\r\nexport class MctsNode {\r\n    public wins: number;\r\n    public visits: number;\r\n    public nodes: Map<\"vertical\" | \"horizontal\", Map<number, Map<number, MctsNode>>>;\r\n    public parent: MctsNode | null;\r\n    private board: Board;\r\n    private player: 0 | 1;\r\n    private simulation: number;\r\n    private c: number\r\n    private generator: Generator<{ orientation: \"vertical\" | \"horizontal\"; x: number; y: number, board: Board }, void, unknown>;\r\n\r\n    constructor(board: Board, player: 0 | 1, simulation: number, c: number, parent: MctsNode | null = null) {\r\n        this.wins = 0;\r\n        this.visits = 0;\r\n        this.nodes = new Map();\r\n        this.parent = parent;\r\n        this.generator = board.getNodes();\r\n        this.board = board;\r\n        this.simulation = simulation;\r\n        this.player = player;\r\n        this.c = c;\r\n    }\r\n\r\n\r\n    public run() {\r\n        if (this.board.isFinished()) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                this.backpropagation(this.simulate());\r\n            }\r\n            return\r\n        }\r\n\r\n        let newChild = this.expansion()\r\n\r\n        if (newChild) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                newChild.backpropagation(newChild.simulate());\r\n            }\r\n        }\r\n        else {\r\n            const { bestNode } = this.selection();\r\n            bestNode.run();\r\n        }\r\n    }\r\n\r\n    private selection(): {\r\n        bestNode: MctsNode;\r\n        x: number;\r\n        y: number;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    } {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits + this.c * Math.sqrt(2 * Math.log(this.visits) / node.visits);\r\n                    if (value > bestValue) {\r\n                        bestValue = value;\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    private simulate() {\r\n        let gen = this.board.getNodes();\r\n        let result: Board = this.board\r\n        for (let node of gen) {\r\n            result = result.play(node.orientation, node.x, node.y)!;\r\n        }\r\n        return result.getWinner() === this.player;\r\n    }\r\n\r\n    private expansion() {\r\n        const { value, done } = this.generator.next();\r\n\r\n        if (done) return false;\r\n\r\n        const { orientation, x, y, board } = value;\r\n        const child = new MctsNode(board, this.player, this.simulation, this.c, this);\r\n        let mapOrientation = this.nodes.get(orientation);\r\n        if (!mapOrientation) {\r\n            mapOrientation = new Map();\r\n            this.nodes.set(orientation, mapOrientation);\r\n        }\r\n\r\n        let mapX = mapOrientation.get(x);\r\n        if (!mapX) {\r\n            mapX = new Map();\r\n            mapOrientation.set(x, mapX);\r\n        }\r\n\r\n        mapX.set(y, child);\r\n\r\n        return child;\r\n    }\r\n\r\n    private backpropagation(won: boolean) {\r\n        if (won) {\r\n            this.wins++;\r\n        }\r\n        this.visits++;\r\n        if (this.parent) {\r\n            this.parent.backpropagation(won);\r\n        }\r\n    }\r\n\r\n    public getBestChild() {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits;\r\n                    if (value > bestValue) {\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestValue = value;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    getNumberVisited() {\r\n        return this.visits;\r\n    }\r\n\r\n}","import { Board } from \"./board\";\r\nimport { MctsNode } from \"./mcts\";\r\nimport negamax from \"./negamax\";\r\nimport nigamax from \"./nigamax\";\r\n\r\nexport interface Coup {\r\n    x: number,\r\n    y: number,\r\n    orientation: \"vertical\" | \"horizontal\"\r\n}\r\n\r\nexport abstract class Player extends EventTarget {\r\n    protected totalTime: number = 0;\r\n    protected totalMove: number = 0;\r\n    protected times: number[] = [];\r\n\r\n    abstract play(board: Board, player: 0 | 1): Promise<Coup>\r\n}\r\n\r\nexport class HumanPlayer extends Player {\r\n    play(board: Board, player: 0 | 1) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const start = performance.now()\r\n            this.addEventListener(\"play\", (e: Event) => {\r\n                const end = performance.now()\r\n                this.totalTime += end - start\r\n                this.totalMove++\r\n                this.times.push(end - start)\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time: ${end - start} Average time: ${this.totalTime / this.totalMove}ms`)\r\n                const customEvent = e as CustomEvent<{ x: number, y: number, orientation: \"vertical\" | \"horizontal\" }>;\r\n                resolve(customEvent.detail);\r\n            }, { once: true })\r\n        })\r\n    }\r\n}\r\n\r\nexport abstract class iaPlayer extends Player {\r\n    async play(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return (await Promise.all([\r\n            (async (): Promise<Coup> => {\r\n                const start = performance.now()\r\n                const result = await this.playIa(board, player)\r\n                const end = performance.now()\r\n                this.totalTime += end - start\r\n                this.totalMove++\r\n                this.times.push(end - start)\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time: ${end - start} Average time: ${this.totalTime / this.totalMove}ms`)\r\n                return result\r\n            })(),\r\n            //delay to see the move\r\n            new Promise<void>((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve()\r\n                }, 500)\r\n            })\r\n        ]))[0]\r\n    }\r\n\r\n    abstract playIa(board: Board, player: number): Promise<Coup>;\r\n}\r\n\r\nexport class MctsPlayer extends iaPlayer {\r\n    private iteration: number;\r\n    private simulation: number;\r\n    private c: number\r\n    private lastBoard: Board | null = null;\r\n    private lastNode: MctsNode | null = null;\r\n\r\n    constructor({ iteration, simulation, c }: { iteration: number, simulation: number, c?: number }) {\r\n        super();\r\n        this.iteration = iteration;\r\n        this.simulation = simulation;\r\n        this.c = c || Math.sqrt(2);\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            let bestNode: MctsNode | null = null;\r\n            if (this.lastBoard && this.lastNode) {\r\n                const played = this.lastBoard\r\n                    .getHorizontals()\r\n                    .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.getHorizontals()[y][x] !== -1 ? { x, y, orientation: \"horizontal\" } : null))\r\n                    .filter(x => x)\r\n                    .concat(\r\n                        this.lastBoard\r\n                            .getVerticals()\r\n                            .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.getVerticals()[y][x] !== -1 ? { x, y, orientation: \"vertical\" } : null))\r\n                            .filter(x => x)\r\n                    ) as { x: number, y: number, orientation: \"vertical\" | \"horizontal\" }[]\r\n\r\n                if (played.length === 0) {\r\n                    bestNode = this.lastNode;\r\n                }\r\n\r\n\r\n                let bestValue = -Infinity;\r\n                if (played.length > 0) {\r\n                    for (const coup of permute(played)) {\r\n                        let currentNode: MctsNode | null = this.lastNode!.nodes.get(coup[0].orientation)?.get(coup[0].x)?.get(coup[0].y) || null;\r\n                        for (let i = 1; i < coup.length; i++) {\r\n                            currentNode = currentNode?.nodes.get(coup[i].orientation)?.get(coup[i].x)?.get(coup[i].y) || null;\r\n                            if (!currentNode) break;\r\n                        }\r\n                        if (currentNode) {\r\n                            if (currentNode.wins > bestValue) {\r\n                                bestValue = currentNode.wins;\r\n                                bestNode = currentNode;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            let root = bestNode || new MctsNode(board, player, this.simulation, this.c);\r\n            while (root.getNumberVisited() < this.iteration * this.simulation) {\r\n                root.run();\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"tree\", { detail: root }));\r\n            let bestChild = root.getBestChild();\r\n            this.lastNode = bestChild.bestNode;\r\n            this.lastBoard = board.play(bestChild.orientation, bestChild.x, bestChild.y);\r\n            resolve({ x: bestChild.x, y: bestChild.y, orientation: bestChild.orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class RandomPlayer extends iaPlayer {\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { orientation, x, y } = board.getNodes().next().value!\r\n            resolve({ x, y, orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class MinimaxPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = negamax(board, this.depth, true, player)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\nexport class FastestPlayer extends iaPlayer {\r\n    private depth: number;\r\n    private ias: (\"minimax\" | \"alphabeta\" | \"mcts\")[] = [\"minimax\", \"alphabeta\", \"mcts\"]\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1) {\r\n        const workers: Worker[] = []\r\n\r\n        return Promise.race(this.ias.map(ia => {\r\n            return new Promise<[Coup, typeof ia]>((resolve) => {\r\n                const worker = new Worker(new URL(\"../playerWorker.ts\", import.meta.url));\r\n                workers.push(worker)\r\n                worker.postMessage({ board: JSON.parse(JSON.stringify(board)), depth: this.depth, player, type: ia });\r\n                worker.addEventListener(\"message\", (e) => {\r\n                    resolve([e.data, ia]);\r\n                })\r\n            })\r\n        })).then(([coup, ia]) => {\r\n            workers.forEach(worker => worker.terminate())\r\n            console.log(ia)\r\n            return coup\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport class AlphaBetaPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = nigamax(board, this.depth, true, player)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction permute<T>(arr: T[]): T[][] {\r\n    let results: T[][] = [];\r\n\r\n    function permuteRecursively(subArr: T[], memo: T[]) {\r\n        if (subArr.length === 0) {\r\n            results.push(memo.slice());\r\n        } else {\r\n            for (let i = 0; i < subArr.length; i++) {\r\n                let curr = subArr.slice();\r\n                let next = curr.splice(i, 1);\r\n                permuteRecursively(curr, memo.concat(next));\r\n            }\r\n        }\r\n    }\r\n\r\n    permuteRecursively(arr, []);\r\n    return results;\r\n}","import { Board, PlayerValue } from \"./board\";\r\n\r\nexport default function negamax(board: Board, _depth: number, maximizingPlayer: boolean, idPlayer: PlayerValue): {\r\n  x: number;\r\n  y: number;\r\n  value: number;\r\n  orientation: \"vertical\" | \"horizontal\";\r\n  nodes: number;\r\n} {\r\n  let x = 0, y = 0, orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n  let nodes = 0;\r\n  function _negamax(board: Board, depth: number, maximizingPlayer: boolean): number {\r\n    if (depth === 0 || board.isFinished())\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n    let value = -Infinity;\r\n    for (const { board: node, x: _x, y: _y, orientation: _orientation } of board.getNodes()) {\r\n      nodes++;\r\n      const result = _negamax(node, depth - 1, !maximizingPlayer);\r\n      if (-result > value) {\r\n        if (depth === _depth) {\r\n          x = _x;\r\n          y = _y;\r\n          orientation = _orientation;\r\n        }\r\n        value = -result;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  const value = _negamax(board, _depth, maximizingPlayer)\r\n\r\n  return {\r\n    x,\r\n    y,\r\n    orientation,\r\n    value,\r\n    nodes\r\n  };\r\n}","import { Board, PlayerValue } from \"./board\";\r\n\r\nexport default function nigamax(board: Board, _depth: number, maximizingPlayer: boolean, idPlayer: PlayerValue, alpha: number = -Infinity, beta: number = Infinity): {\r\n  x: number;\r\n  y: number;\r\n  value: number;\r\n  orientation: \"vertical\" | \"horizontal\";\r\n  nodes: number;\r\n} {\r\n  let x = 0, y = 0, orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n  let nodes = 0;\r\n  function _nigamax(board: Board, depth: number, maximizingPlayer: boolean, alpha: number = -Infinity, beta: number = Infinity): number {\r\n    if (depth === 0 || board.isFinished()) {\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n    }\r\n    let value = -Infinity;\r\n    for (const { board: node, x: _x, y: _y, orientation: _orientation } of board.getNodes()) {\r\n      nodes++;\r\n      const result = _nigamax(node, depth - 1, !maximizingPlayer, -beta, -alpha);\r\n      if (-result > value) {\r\n        value = -result;\r\n        if (depth === _depth) {\r\n          x = _x;\r\n          y = _y;\r\n          orientation = _orientation;\r\n        }\r\n      }\r\n      if (value >= beta) {\r\n        return value\r\n      }\r\n      alpha = Math.max(alpha, value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  const value = _nigamax(board, _depth, maximizingPlayer, alpha, beta)\r\n  return {\r\n    value,\r\n    x,\r\n    y,\r\n    orientation,\r\n    nodes\r\n  };\r\n}\r\n","import { Board } from \"./utils/board\";\r\nimport { AlphaBetaPlayer, HumanPlayer, MctsPlayer, MinimaxPlayer, Player, RandomPlayer } from \"./utils/player\";\r\n\r\ndeclare var self: DedicatedWorkerGlobalScope;\r\n\r\n//remove console.log\r\nconsole.log = () => { }\r\n\r\nself.addEventListener(\"message\", ({ data: { board, player, type } }: {\r\n    data: {\r\n        board: any, player: any, type: string\r\n    }\r\n}) => {\r\n    let playerType: Player;\r\n    switch (type) {\r\n        case \"human\":\r\n            playerType = new HumanPlayer()\r\n            break;\r\n        case \"random\":\r\n            playerType = new RandomPlayer()\r\n            break;\r\n        case \"minimax\":\r\n            playerType = new MinimaxPlayer({ depth: 3 })\r\n            break;\r\n        case \"alphabeta\":\r\n            playerType = new AlphaBetaPlayer({ depth: 3 })\r\n            break;\r\n        case \"mcts\":\r\n            playerType = new MctsPlayer({ iteration: 1000, c: 1.41, simulation: 10 })\r\n            break;\r\n        default:\r\n            throw new Error(\"Invalid player type\")\r\n    }\r\n\r\n\r\n    playerType.play(new Board(board), player).then((coup) => {\r\n        self.postMessage(coup);\r\n    })\r\n});\r\n\r\n\r\n\r\nexport { };\r\n\r\n","// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"42225515\" + \".chunk.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/POLYTECH-IA-PROJET-PIPOPIPETTE/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t856: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[5856](0, __webpack_exports__, __webpack_require__);\n"],"names":["Board","constructor","BoardOrSize","cells","verticals","horizontals","previousBoard","score","tour","this","Array","fill","map","getCells","getVerticals","getHorizontals","getScore","getWinner","length","getTour","play","orientation","x","y","newHorizontals","row","newVerticals","newCells","newScore","newTour","Error","result","check","push","forEach","cell","isFinished","_horizontals","evaluation","idPlayer","getNodes","playable","flatMap","value","filter","_ref","_ref2","splice","Math","floor","random","board","node","MctsNode","player","simulation","c","parent","arguments","undefined","wins","visits","nodes","generator","Map","run","i","backpropagation","simulate","newChild","expansion","bestNode","selection","bestValue","Infinity","_orientation","_x","_y","sqrt","log","gen","done","next","child","mapOrientation","get","set","mapX","won","getBestChild","getNumberVisited","Player","EventTarget","totalTime","totalMove","times","HumanPlayer","Promise","resolve","start","performance","now","addEventListener","e","end","console","name","detail","once","iaPlayer","all","playIa","setTimeout","MctsPlayer","iteration","super","lastBoard","lastNode","played","concat","coup","arr","results","permuteRecursively","subArr","memo","slice","curr","permute","_nodes$get","_nodes$get$get","currentNode","_currentNode","_currentNode$nodes$ge","_currentNode$nodes$ge2","root","dispatchEvent","CustomEvent","bestChild","RandomPlayer","MinimaxPlayer","depth","_depth","maximizingPlayer","_negamax","negamax","AlphaBetaPlayer","_ref5","_nigamax","alpha","beta","max","nigamax","self","playerType","data","type","then","postMessage","__webpack_require__","m","__webpack_modules__","u","chunkId","o","obj","prop","Object","prototype","hasOwnProperty","call","p","b","location"],"sourceRoot":""}