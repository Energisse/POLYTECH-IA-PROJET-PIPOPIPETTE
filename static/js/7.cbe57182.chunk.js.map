{"version":3,"file":"static/js/7.cbe57182.chunk.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/get javascript chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","utils/board.ts","utils/game.ts","utils/mcts.ts","utils/player.ts","utils/negamax.ts","utils/nigamax.ts","worker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"43076a83\" + \".chunk.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/POLYTECH-IA-PROJET-PIPOPIPETTE/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t7: 1\n};\n\n// no chunk install function needed\n// no chunk loading\n\n// no HMR\n\n// no HMR manifest","import { Coup } from \"./player\";\r\n\r\nexport type NodeGenerator = Generator<\r\n    {\r\n        x: number;\r\n        y: number;\r\n        board: Board;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    },\r\n    void,\r\n    void\r\n>;\r\n\r\nexport type PlayValue = -1 | 0 | 1;\r\nexport type PlayerValue = 0 | 1;\r\n\r\nexport class Board {\r\n    readonly cells: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly verticals: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly horizontals: ReadonlyArray<ReadonlyArray<PlayValue>> = [];\r\n    readonly previousBoard: Board | null = null;\r\n    readonly score: readonly [number, number] = [0, 0];\r\n    readonly tour: PlayerValue = 0;\r\n\r\n    constructor(size: number);\r\n    constructor(board: { cells: PlayValue[][]; verticals: PlayValue[][]; horizontals: PlayValue[][]; score: [number, number]; tour: PlayerValue, previousBoard?: Board });\r\n    constructor(BoardOrSize: number | { cells: PlayValue[][]; verticals: PlayValue[][]; horizontals: PlayValue[][]; score: [number, number]; tour: PlayerValue, previousBoard?: Board }) {\r\n        if (typeof BoardOrSize === \"number\") {\r\n            this.cells = new Array(BoardOrSize).fill(0).map(() => new Array(BoardOrSize).fill(-1));\r\n            this.verticals = new Array(BoardOrSize)\r\n                .fill(0)\r\n                .map(() => new Array(BoardOrSize + 1).fill(-1));\r\n            this.horizontals = new Array(BoardOrSize + 1)\r\n                .fill(0)\r\n                .map(() => new Array(BoardOrSize).fill(-1));\r\n            this.score = [0, 0];\r\n            this.tour = 0;\r\n        } else {\r\n            this.cells = BoardOrSize.cells;\r\n            this.verticals = BoardOrSize.verticals;\r\n            this.horizontals = BoardOrSize.horizontals;\r\n            this.score = BoardOrSize.score;\r\n            this.tour = BoardOrSize.tour;\r\n            this.previousBoard = BoardOrSize.previousBoard || null;\r\n        }\r\n    }\r\n\r\n    public getCells(): ReadonlyArray<ReadonlyArray<PlayValue>> {\r\n        return this.cells;\r\n    }\r\n\r\n    public getVerticals(): ReadonlyArray<ReadonlyArray<PlayValue>> {\r\n        return this.verticals;\r\n    }\r\n\r\n    public getHorizontals(): ReadonlyArray<ReadonlyArray<PlayValue>> {\r\n        return this.horizontals;\r\n    }\r\n\r\n    public getScore(): readonly [number, number] {\r\n        return this.score;\r\n    }\r\n\r\n    public getWinner(): 0 | 1 | null {\r\n        if (this.score[0] > this.cells.length ** 2 / 2) return 0;\r\n        if (this.score[1] > this.cells.length ** 2 / 2) return 1;\r\n        return null;\r\n    }\r\n\r\n    public getTour(): PlayerValue {\r\n        return this.tour;\r\n    }\r\n\r\n    public play(\r\n        orientation: \"vertical\" | \"horizontal\",\r\n        x: number,\r\n        y: number\r\n    ): Board | null {\r\n\r\n        const newHorizontals = this.horizontals.map((row) => [...row]);\r\n        const newVerticals = this.verticals.map((row) => [...row]);\r\n        const newCells = this.cells.map((row) => [...row]);\r\n        const newScore = [...this.score];\r\n        let newTour = this.tour;\r\n\r\n        if (orientation === \"vertical\") {\r\n            if (newVerticals[y][x] !== -1) {\r\n                console.error(\"Invalid move \" + orientation + x + y)\r\n                return null;\r\n            }\r\n            newVerticals[y][x] = this.tour;\r\n        } else {\r\n            if (newHorizontals[y][x] !== -1) {\r\n                console.error(\"Invalid move \" + orientation + x + y);\r\n                return null;\r\n            }\r\n            newHorizontals[y][x] = this.tour;\r\n\r\n\r\n        }\r\n\r\n        const cells: Array<[x: number, y: number]> = [];\r\n\r\n        if (orientation === \"horizontal\") {\r\n            let result = this.check(newHorizontals, newVerticals, x, y);\r\n            if (result) cells.push(result);\r\n            result = this.check(newHorizontals, newVerticals, x, y - 1);\r\n            if (result) cells.push(result);\r\n        } else {\r\n            let result = this.check(newHorizontals, newVerticals, x, y);\r\n            if (result) cells.push(result);\r\n            result = this.check(newHorizontals, newVerticals, x - 1, y);\r\n            if (result) cells.push(result);\r\n        }\r\n\r\n        if (!cells.length) {\r\n            newTour = newTour === 1 ? 0 : 1;\r\n        } else {\r\n            newScore[newTour] += cells.length;\r\n\r\n            cells.forEach((cell) => {\r\n                newCells[cell[1]][cell[0]] = newTour;\r\n            });\r\n        }\r\n\r\n        return new Board({\r\n            cells: newCells,\r\n            verticals: newVerticals,\r\n            horizontals: newHorizontals,\r\n            score: newScore as [number, number],\r\n            tour: newTour,\r\n            previousBoard: this\r\n        });\r\n    }\r\n\r\n    public isFinished() {\r\n        return this.score[0] > this.cells.length ** 2 / 2 || this.score[1] > this.cells.length ** 2 / 2 || this.score[0] + this.score[1] === this.cells.length ** 2;\r\n    }\r\n\r\n    private check(horizontals: PlayValue[][], verticals: PlayValue[][], x: number, y: number): false | [x: number, y: number] {\r\n        if (x < 0 || x >= this.cells.length || y < 0 || y >= this.cells.length) {\r\n            return false;\r\n        }\r\n        if (\r\n            verticals[y][x] !== -1 &&\r\n            verticals[y][x + 1] !== -1 &&\r\n            horizontals[y][x] !== -1 &&\r\n            horizontals[y + 1]?.[x] !== -1\r\n        ) {\r\n            return [x, y];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public evaluation(idPlayer: PlayerValue) {\r\n        return this.score[idPlayer] - this.score[idPlayer === 1 ? 0 : 1];\r\n    }\r\n\r\n\r\n    public *getNodes(): NodeGenerator {\r\n        const playable = [\r\n            ...this.verticals\r\n                .flatMap((row, y) => row.map((value, x) => ({ x, y, value, orientation: \"vertical\" } satisfies Coup & { value: number })))\r\n                .filter(({ value }) => value === -1),\r\n            ...this.horizontals\r\n                .flatMap((row, y) => row.map((value, x) => ({ x, y, value, orientation: \"horizontal\" } satisfies Coup & { value: number })))\r\n                .filter(({ value }) => value === -1)\r\n        ]\r\n\r\n        let currentIndex = playable.length;\r\n        while (currentIndex !== 0) {\r\n\r\n            let randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n\r\n            // And swap it with the current element.\r\n            [playable[currentIndex], playable[randomIndex]] = [\r\n                playable[randomIndex], playable[currentIndex]];\r\n        }\r\n\r\n        for (let i = 0; i < playable.length; i++) {\r\n            const { x, y, orientation } = playable[i];\r\n            const board = this.play(orientation, x, y)!;\r\n            if (board.tour === board.previousBoard!.tour && !board.isFinished()) {\r\n                for (const node of board.getNodes()) {\r\n                    yield { ...node, x, y, orientation };\r\n                }\r\n            } else yield { x, y, board, orientation };\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { Board } from \"./board\";\r\nimport { Player } from \"./player\";\r\nexport default class Game extends EventTarget {\r\n  private board: Board;\r\n  private players: [Player, Player];\r\n  private playing: boolean = false;\r\n\r\n  constructor(size: number, player1: Player, player2: Player) {\r\n    super();\r\n    this.board = new Board(size);\r\n    this.players = [player1, player2];\r\n    this.play();\r\n  }\r\n\r\n  getBoard() {\r\n    return this.board;\r\n  }\r\n\r\n  private async play() {\r\n    if (this.playing) return;\r\n    this.playing = true;\r\n    while (!this.board.isFinished()) {\r\n      await this.players[this.board.getTour()].play(this.board, this.board.getTour()).then((coup) => {\r\n        const newBoard = this.board.play(coup.orientation, coup.x, coup.y)\r\n        if (newBoard) {\r\n          this.board = newBoard;\r\n          this.dispatchEvent(new CustomEvent(\"played\", {\r\n            detail: {\r\n              played: {\r\n                x: coup.x, y: coup.y, orientation: coup.orientation, player: newBoard.previousBoard!.tour\r\n              },\r\n              board: {\r\n                verticals: this.board.getVerticals(),\r\n                horizontals: this.board.getHorizontals(),\r\n                cells: this.board.getCells(),\r\n                score: this.board.getScore(),\r\n                player: this.board.getTour()\r\n              }\r\n            }\r\n          }));\r\n        }\r\n      });\r\n    }\r\n    const [player1, player2] = this.board.getScore();\r\n\r\n    this.dispatchEvent(new CustomEvent(\"end\", {\r\n      detail: {\r\n        winner: player1 > player2 ? 0 : player1 < player2 ? 1 : -1\r\n      }\r\n    }));\r\n  }\r\n\r\n  public async start() {\r\n    await this.play();\r\n  }\r\n}\r\n","import { Board } from \"./board\";\r\n\r\nexport class MctsNode {\r\n    public wins: number;\r\n    public visits: number;\r\n    public nodes: Map<\"vertical\" | \"horizontal\", Map<number, Map<number, MctsNode>>>;\r\n    public parent: MctsNode | null;\r\n    private board: Board;\r\n    private player: 0 | 1;\r\n    private simulation: number;\r\n    private c: number\r\n    private generator: Generator<{ orientation: \"vertical\" | \"horizontal\"; x: number; y: number, board: Board }, void, unknown>;\r\n\r\n    constructor(board: Board, player: 0 | 1, simulation: number, c: number, parent: MctsNode | null = null) {\r\n        this.wins = 0;\r\n        this.visits = 0;\r\n        this.nodes = new Map();\r\n        this.parent = parent;\r\n        this.generator = board.getNodes();\r\n        this.board = board;\r\n        this.simulation = simulation;\r\n        this.player = player;\r\n        this.c = c;\r\n    }\r\n\r\n\r\n    public run() {\r\n        if (this.board.isFinished()) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                this.backpropagation(this.simulate());\r\n            }\r\n            return\r\n        }\r\n\r\n        let newChild = this.expansion()\r\n\r\n        if (newChild) {\r\n            for (let i = 0; i < this.simulation; i++) {\r\n                newChild.backpropagation(newChild.simulate());\r\n            }\r\n        }\r\n        else {\r\n            const { bestNode } = this.selection();\r\n            bestNode.run();\r\n        }\r\n    }\r\n\r\n    private selection(): {\r\n        bestNode: MctsNode;\r\n        x: number;\r\n        y: number;\r\n        orientation: \"vertical\" | \"horizontal\";\r\n    } {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits + this.c * Math.sqrt(2 * Math.log(this.visits) / node.visits);\r\n                    if (value > bestValue) {\r\n                        bestValue = value;\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    private simulate() {\r\n        let board = this.board;\r\n        while (true) {\r\n            const { value, done } = board.getNodes().next();\r\n            if (done) break;\r\n            board = value.board\r\n        }\r\n        return board.getWinner() === this.player;\r\n    }\r\n\r\n    private expansion() {\r\n        const { value, done } = this.generator.next();\r\n\r\n        if (done) return false;\r\n\r\n        const { orientation, x, y, board } = value;\r\n        const child = new MctsNode(board, this.player, this.simulation, this.c, this);\r\n        let mapOrientation = this.nodes.get(orientation);\r\n        if (!mapOrientation) {\r\n            mapOrientation = new Map();\r\n            this.nodes.set(orientation, mapOrientation);\r\n        }\r\n\r\n        let mapX = mapOrientation.get(x);\r\n        if (!mapX) {\r\n            mapX = new Map();\r\n            mapOrientation.set(x, mapX);\r\n        }\r\n\r\n        mapX.set(y, child);\r\n\r\n        return child;\r\n    }\r\n\r\n    private backpropagation(won: boolean) {\r\n        if (won) {\r\n            this.wins++;\r\n        }\r\n        this.visits++;\r\n        if (this.parent) {\r\n            this.parent.backpropagation(won);\r\n        }\r\n    }\r\n\r\n    public getBestChild() {\r\n        let bestNode: MctsNode | null = null;\r\n        let x: number = 0;\r\n        let y: number = 0;\r\n        let orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n        let bestValue = -Infinity;\r\n        this.nodes.forEach((row, _orientation) => {\r\n            row.forEach((cell, _x) => {\r\n                cell.forEach((node, _y) => {\r\n                    const value = node.wins / node.visits;\r\n                    if (value > bestValue) {\r\n                        orientation = _orientation as \"vertical\" | \"horizontal\";\r\n                        x = +_x;\r\n                        y = +_y;\r\n                        bestValue = value;\r\n                        bestNode = node;\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return { bestNode: bestNode!, x, y, orientation };\r\n    }\r\n\r\n    getNumberVisited() {\r\n        return this.visits;\r\n    }\r\n\r\n}","import { Board } from \"./board\";\r\nimport { MctsNode } from \"./mcts\";\r\nimport negamax from \"./negamax\";\r\nimport nigamax from \"./nigamax\";\r\n\r\nexport interface Coup {\r\n    x: number,\r\n    y: number,\r\n    orientation: \"vertical\" | \"horizontal\"\r\n}\r\n\r\nexport abstract class Player extends EventTarget {\r\n    protected totalTime: number = 0;\r\n    protected totalMove: number = 0;\r\n    protected times: number[] = [];\r\n\r\n    abstract play(board: Board, player: 0 | 1): Promise<Coup>\r\n}\r\n\r\nexport class HumanPlayer extends Player {\r\n    play(board: Board, player: 0 | 1) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const start = performance.now()\r\n            this.addEventListener(\"play\", (e: Event) => {\r\n                const end = performance.now()\r\n                this.totalTime += end - start\r\n                this.totalMove++\r\n                this.times.push(end - start)\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time: ${end - start} Average time: ${this.totalTime / this.totalMove}ms`)\r\n                const customEvent = e as CustomEvent<{ x: number, y: number, orientation: \"vertical\" | \"horizontal\" }>;\r\n                resolve(customEvent.detail);\r\n            }, { once: true })\r\n        })\r\n    }\r\n}\r\n\r\nexport abstract class iaPlayer extends Player {\r\n    async play(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return (await Promise.all([\r\n            (async (): Promise<Coup> => {\r\n                const start = performance.now()\r\n                const result = await this.playIa(board, player)\r\n                const end = performance.now()\r\n                this.totalTime += end - start\r\n                this.totalMove++\r\n                this.times.push(end - start)\r\n                console.log(`Player ${player} (${(this as any).constructor.name}) Time: ${end - start} Average time: ${this.totalTime / this.totalMove}ms`)\r\n                return result\r\n            })(),\r\n            //delay to see the move\r\n            new Promise<void>((resolve) => {\r\n                setTimeout(() => {\r\n                    resolve()\r\n                }, 500)\r\n            })\r\n        ]))[0]\r\n    }\r\n\r\n    abstract playIa(board: Board, player: number): Promise<Coup>;\r\n}\r\n\r\nexport class MctsPlayer extends iaPlayer {\r\n    private iteration: number;\r\n    private simulation: number;\r\n    private c: number\r\n    private lastBoard: Board | null = null;\r\n    private lastNode: MctsNode | null = null;\r\n\r\n    constructor({ iteration, simulation, c }: { iteration: number, simulation: number, c?: number }) {\r\n        super();\r\n        this.iteration = iteration;\r\n        this.simulation = simulation;\r\n        this.c = c || Math.sqrt(2);\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            let bestNode: MctsNode | null = null;\r\n            if (this.lastBoard && this.lastNode) {\r\n                const played = this.lastBoard\r\n                    .getHorizontals()\r\n                    .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.getHorizontals()[y][x] !== -1 ? { x, y, orientation: \"horizontal\" } : null))\r\n                    .filter(x => x)\r\n                    .concat(\r\n                        this.lastBoard\r\n                            .getVerticals()\r\n                            .flatMap((row, y) => row.map((cell, x) => cell === -1 && board.getVerticals()[y][x] !== -1 ? { x, y, orientation: \"vertical\" } : null))\r\n                            .filter(x => x)\r\n                    ) as { x: number, y: number, orientation: \"vertical\" | \"horizontal\" }[]\r\n\r\n                if (played.length === 0) {\r\n                    bestNode = this.lastNode;\r\n                }\r\n\r\n\r\n                let bestValue = -Infinity;\r\n                if (played.length > 0) {\r\n                    for (const coup of permute(played)) {\r\n                        let currentNode: MctsNode | null = this.lastNode!.nodes.get(coup[0].orientation)?.get(coup[0].x)?.get(coup[0].y) || null;\r\n                        for (let i = 1; i < coup.length; i++) {\r\n                            currentNode = currentNode?.nodes.get(coup[i].orientation)?.get(coup[i].x)?.get(coup[i].y) || null;\r\n                            if (!currentNode) break;\r\n                        }\r\n                        if (currentNode) {\r\n                            if (currentNode.wins > bestValue) {\r\n                                bestValue = currentNode.wins;\r\n                                bestNode = currentNode;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            let root = bestNode || new MctsNode(board, player, this.simulation, this.c);\r\n            while (root.getNumberVisited() < this.iteration * this.simulation) {\r\n                root.run();\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"tree\", { detail: root }));\r\n            let bestChild = root.getBestChild();\r\n            this.lastNode = bestChild.bestNode;\r\n            this.lastBoard = board.play(bestChild.orientation, bestChild.x, bestChild.y);\r\n            resolve({ x: bestChild.x, y: bestChild.y, orientation: bestChild.orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class RandomPlayer extends iaPlayer {\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { orientation, x, y } = board.getNodes().next().value!\r\n            resolve({ x, y, orientation });\r\n        })\r\n    }\r\n}\r\n\r\nexport class MinimaxPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1): Promise<Coup> {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = negamax(board, this.depth, true, player)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\nexport class FastestPlayer extends iaPlayer {\r\n    private depth: number;\r\n    private ias: (\"minimax\" | \"alphabeta\" | \"mcts\")[] = [\"minimax\", \"alphabeta\", \"mcts\"]\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1) {\r\n        const workers: Worker[] = []\r\n\r\n        return Promise.race(this.ias.map(ia => {\r\n            return new Promise<[Coup, typeof ia]>((resolve) => {\r\n                const worker = new Worker(new URL(\"../playerWorker.ts\", import.meta.url));\r\n                workers.push(worker)\r\n                worker.postMessage({ board: JSON.parse(JSON.stringify(board)), depth: this.depth, player, type: ia });\r\n                worker.addEventListener(\"message\", (e) => {\r\n                    resolve([e.data, ia]);\r\n                })\r\n            })\r\n        })).then(([coup, ia]) => {\r\n            workers.forEach(worker => worker.terminate())\r\n            console.log(ia)\r\n            return coup\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport class AlphaBetaPlayer extends iaPlayer {\r\n    private depth: number;\r\n\r\n    constructor({ depth }: { depth: number }) {\r\n        super();\r\n        this.depth = depth;\r\n    }\r\n\r\n    playIa(board: Board, player: 0 | 1) {\r\n        return new Promise<Coup>((resolve) => {\r\n            const { nodes, ...coup } = nigamax(board, this.depth, true, player)\r\n            console.log(`Player ${player} (${(this as any).constructor.name}) : ${nodes} nodes`)\r\n            resolve(coup);\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction permute<T>(arr: T[]): T[][] {\r\n    let results: T[][] = [];\r\n\r\n    function permuteRecursively(subArr: T[], memo: T[]) {\r\n        if (subArr.length === 0) {\r\n            results.push(memo.slice());\r\n        } else {\r\n            for (let i = 0; i < subArr.length; i++) {\r\n                let curr = subArr.slice();\r\n                let next = curr.splice(i, 1);\r\n                permuteRecursively(curr, memo.concat(next));\r\n            }\r\n        }\r\n    }\r\n\r\n    permuteRecursively(arr, []);\r\n    return results;\r\n}","import { Board, PlayerValue } from \"./board\";\r\n\r\nexport default function negamax(board: Board, _depth: number, maximizingPlayer: boolean, idPlayer: PlayerValue): {\r\n  x: number;\r\n  y: number;\r\n  value: number;\r\n  orientation: \"vertical\" | \"horizontal\";\r\n  nodes: number;\r\n} {\r\n  let x = 0, y = 0, orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n  let nodes = 0;\r\n  function _negamax(board: Board, depth: number, maximizingPlayer: boolean): number {\r\n    if (depth === 0 || board.isFinished())\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n    let value = -Infinity;\r\n    for (const { board: node, x: _x, y: _y, orientation: _orientation } of board.getNodes()) {\r\n      nodes++;\r\n      const result = _negamax(node, depth - 1, !maximizingPlayer);\r\n      if (-result > value) {\r\n        if (depth === _depth) {\r\n          x = _x;\r\n          y = _y;\r\n          orientation = _orientation;\r\n        }\r\n        value = -result;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  const value = _negamax(board, _depth, maximizingPlayer)\r\n\r\n  return {\r\n    x,\r\n    y,\r\n    orientation,\r\n    value,\r\n    nodes\r\n  };\r\n}","import { Board, PlayerValue } from \"./board\";\r\n\r\nexport default function nigamax(board: Board, _depth: number, maximizingPlayer: boolean, idPlayer: PlayerValue, alpha: number = -Infinity, beta: number = Infinity): {\r\n  x: number;\r\n  y: number;\r\n  value: number;\r\n  orientation: \"vertical\" | \"horizontal\";\r\n  nodes: number;\r\n} {\r\n  let x = 0, y = 0, orientation: \"vertical\" | \"horizontal\" = \"vertical\";\r\n  let nodes = 0;\r\n  function _nigamax(board: Board, depth: number, maximizingPlayer: boolean, alpha: number = -Infinity, beta: number = Infinity): number {\r\n    if (depth === 0 || board.isFinished()) {\r\n      return board.evaluation(idPlayer) * (maximizingPlayer ? 1 : -1)\r\n    }\r\n    let value = -Infinity;\r\n    for (const { board: node, x: _x, y: _y, orientation: _orientation } of board.getNodes()) {\r\n      nodes++;\r\n      const result = _nigamax(node, depth - 1, !maximizingPlayer, -beta, -alpha);\r\n      if (-result > value) {\r\n        value = -result;\r\n        if (depth === _depth) {\r\n          x = _x;\r\n          y = _y;\r\n          orientation = _orientation;\r\n        }\r\n      }\r\n      if (value >= beta) {\r\n        return value\r\n      }\r\n      alpha = Math.max(alpha, value);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  const value = _nigamax(board, _depth, maximizingPlayer, alpha, beta)\r\n  return {\r\n    value,\r\n    x,\r\n    y,\r\n    orientation,\r\n    nodes\r\n  };\r\n}\r\n","import { MainToWorkerEventMap } from \"./@types/worker\";\r\nimport { PlayerValue, PlayValue } from \"./utils/board\";\r\nimport Game from \"./utils/game\";\r\nimport { AlphaBetaPlayer, FastestPlayer, HumanPlayer, MctsPlayer, MinimaxPlayer, RandomPlayer } from \"./utils/player\";\r\n\r\ndeclare var self: DedicatedWorkerGlobalScope;\r\n\r\nDedicatedWorkerGlobalScope.prototype.emit = function (...data) {\r\n    this.postMessage({ type: data[0], data: data[1] });\r\n}\r\n\r\nself.addEventListener(\"message\", ({ data: { data, type } }) => {\r\n    self.dispatchEvent(new CustomEvent(type, {\r\n        detail: data\r\n    }));\r\n});\r\n\r\nlet game: Game | null = null;\r\n\r\ntype Node = {\r\n    visits: number,\r\n    wins: number,\r\n    nodes: Map<string, Map<number, Map<number, Node>>>\r\n}\r\n\r\ntype Data = {\r\n    name: string,\r\n    children: Data[]\r\n}\r\n\r\nfunction formatNode(node: Node): Data {\r\n    const children = new Array<Data>();\r\n    node.nodes.forEach((row, orientation) => {\r\n        row.forEach((cell, x) => {\r\n            cell.forEach((node, y) => {\r\n                children.push(formatNode(node));\r\n            });\r\n        });\r\n    });\r\n\r\n    return {\r\n        name: `${node.wins}/${node.visits}`,\r\n        children\r\n    }\r\n\r\n}\r\n\r\nself.addEventListener(\"start\", ({ detail: { player1, player2, size } }) => {\r\n    if (game) return;\r\n\r\n    const player1Instance = createPlayer(player1);\r\n    const player2Instance = createPlayer(player2);\r\n\r\n    player1Instance.addEventListener(\"tree\", (e) => {\r\n        self.emit(\"tree\", {\r\n            player: 1,\r\n            tree: formatNode((e as CustomEvent<Node>).detail)\r\n        });\r\n    });\r\n\r\n    player2Instance.addEventListener(\"tree\", (e) => {\r\n        self.emit(\"tree\", {\r\n            player: 2,\r\n            tree: formatNode((e as CustomEvent<Node>).detail)\r\n        });\r\n    });\r\n\r\n\r\n    game = new Game(size, player1Instance, player2Instance);\r\n\r\n    if (player1Instance instanceof HumanPlayer) {\r\n        self.addEventListener(\"play\", (e) => {\r\n            player1Instance.dispatchEvent(new CustomEvent(\"play\", {\r\n                detail: e.detail\r\n            }));\r\n        });\r\n    }\r\n\r\n    if (player2Instance instanceof HumanPlayer) {\r\n        self.addEventListener(\"play\", (e) => {\r\n            player2Instance.dispatchEvent(new CustomEvent(\"play\", {\r\n                detail: e.detail\r\n            }));\r\n        });\r\n    }\r\n\r\n    self.emit(\"change\", {\r\n        verticals: game.getBoard().getVerticals(),\r\n        horizontals: game.getBoard().getHorizontals(),\r\n        score: game.getBoard().getScore(),\r\n        tour: game.getBoard().getTour(),\r\n        cells: game.getBoard().getCells()\r\n    });\r\n\r\n    game.addEventListener(\"end\", (e) => {\r\n        const { winner } = (\r\n            e as CustomEvent<{\r\n                winner: PlayerValue\r\n            }>\r\n        ).detail;\r\n        self.emit(\"end\", {\r\n            winner\r\n        });\r\n    });\r\n\r\n    game.addEventListener(\"played\", (e) => {\r\n        const { board: {\r\n            cells,\r\n            verticals,\r\n            horizontals,\r\n            player,\r\n            score\r\n        } } = (\r\n            e as CustomEvent<{\r\n                played: {\r\n                    x: number;\r\n                    y: number;\r\n                    orientation: string;\r\n                    player: PlayerValue;\r\n                };\r\n                board: {\r\n                    verticals: ReadonlyArray<ReadonlyArray<PlayValue>>;\r\n                    horizontals: ReadonlyArray<ReadonlyArray<PlayValue>>;\r\n                    cells: ReadonlyArray<ReadonlyArray<PlayValue>>;\r\n                    score: readonly [number, number];\r\n                    player: PlayerValue;\r\n                };\r\n            }>\r\n        ).detail;\r\n\r\n        self.emit(\"change\", {\r\n            verticals,\r\n            horizontals,\r\n            score: score,\r\n            tour: player,\r\n            cells\r\n        });\r\n    });\r\n\r\n    game.start().then(() => {\r\n        self.emit(\"end\", {\r\n            winner: game!.getBoard().getWinner()\r\n        });\r\n    });\r\n});\r\n\r\n\r\nfunction createPlayer(player: MainToWorkerEventMap[\"start\"][\"detail\"][\"player1\"]) {\r\n    switch (player.type) {\r\n        case \"human\":\r\n            return new HumanPlayer();\r\n        case \"random\":\r\n            return new RandomPlayer();\r\n        case \"minimax\":\r\n            return new MinimaxPlayer(player);\r\n        case \"alphabeta\":\r\n            return new AlphaBetaPlayer(player);\r\n        case \"mcts\":\r\n            return new MctsPlayer(player);\r\n        case \"fastest\":\r\n            return new FastestPlayer(player);\r\n    }\r\n}\r\n\r\n\r\nexport { };\r\n\r\n"],"names":["__webpack_require__","chunkId","obj","prop","Object","prototype","hasOwnProperty","call","b","self","location","Board","constructor","BoardOrSize","cells","verticals","horizontals","previousBoard","score","tour","this","Array","fill","map","getCells","getVerticals","getHorizontals","getScore","getWinner","length","getTour","play","orientation","x","y","newHorizontals","row","newVerticals","newCells","newScore","newTour","console","error","result","check","push","forEach","cell","isFinished","_horizontals","evaluation","idPlayer","getNodes","playable","flatMap","value","filter","_ref","_ref2","currentIndex","randomIndex","Math","floor","random","i","board","node","Game","EventTarget","size","player1","player2","super","players","playing","getBoard","then","coup","newBoard","dispatchEvent","CustomEvent","detail","played","player","winner","start","MctsNode","simulation","c","parent","arguments","undefined","wins","visits","nodes","generator","Map","run","backpropagation","simulate","newChild","expansion","bestNode","selection","bestValue","Infinity","_orientation","_x","_y","sqrt","log","done","next","child","mapOrientation","get","set","mapX","won","getBestChild","getNumberVisited","Player","totalTime","totalMove","times","HumanPlayer","Promise","resolve","performance","now","addEventListener","e","end","name","once","iaPlayer","all","playIa","setTimeout","MctsPlayer","iteration","lastBoard","lastNode","concat","arr","results","permuteRecursively","subArr","memo","slice","curr","splice","permute","_nodes$get","_nodes$get$get","currentNode","_currentNode","_currentNode$nodes$ge","_currentNode$nodes$ge2","root","bestChild","RandomPlayer","MinimaxPlayer","depth","_depth","maximizingPlayer","_negamax","negamax","FastestPlayer","_ref3","ias","workers","race","ia","worker","Worker","URL","postMessage","JSON","parse","stringify","type","data","_ref4","terminate","AlphaBetaPlayer","_ref5","_nigamax","alpha","beta","max","nigamax","DedicatedWorkerGlobalScope","emit","game","formatNode","children","createPlayer","player1Instance","player2Instance","tree"],"sourceRoot":""}